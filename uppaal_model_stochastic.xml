<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>/// ********** CONSTANTS

// number of conveyor belt segments
const int NS = 7;
// max length of a conveyor belt segment
const int L = 25;
// number of processing stations
const int NP = 6;


/// ********** CUSTOM TYPES

// id type
typedef int[0, NS + NP - 1] id;


/// ********** SYSTEM SETTINGS

// conveyor belt speed [slots/s]
const int speed = 2;
// processing stations processing time
const int processing_time[NP] = {7,8,6,5,7,8};
// processing stations location on belts
const int P_pos[NP] = {4, 4, 3, 4, 4, 3};

// number of pieces
const int NPC = 13;    // previously 6
double prova;


/// ********** EXTRA SETTINGS

// id of following component
//id next[NS + NP] = {7, 8, 4, 10, 11, 6, 12, 1, 2, 3, 6, 5, 0};
id next[NS + NP] = {7, 8, 9, 10, 11, 6, 12, 1, 2, 3, 6, 5, 0};

// length of each conveyor belt segment
const int length[NS + NP] = {13, 16, 25, 4, 13, 2, 5, 5, 5, 4, 9, 6, 4};



/// ********** CHANNELS

// channel to synchronize belts movement
broadcast chan synch1, synch2, synch3, synch4,sync_initialize;
// 
broadcast chan pieceAvailable[NP], control;
// channel priority
chan priority default &lt; pieceAvailable &lt; control;


/// ********** OTHER DATA STRUCTURES

// stations busy processing
bool busy[NP];
// stations ready to accept a new piece
bool ready[NP];
// stations that can release a piece
bool canRelease[NP];
// conveyor belt segments matrix
bool belt[NS + NP][L];
// id of component preceding a belt segment
id prev_id[NS];
// true if the previous component is unique
bool unique_prev[NS];
// belt semaphore
bool blocked[NS];


/// ********** FUNCTIONS

// remove last piece from belt segment
void removeLast(id b_id) {
    belt[b_id][length[b_id] - 1] = false;
}
// set the busy state of a processing station
void setBusy(id s_id, bool s) {
    busy[s_id - NS] = s;
}
// set the done state of a processing station
void setDone(id s_id, bool s) {
    //done[s_id - NS] = s;
}


/// ********** PISTONE VERDE
// 1: ALTERNATI
// 2: IN 8 (3) SE LIBERA
// 3: UN'ALTRA POLICY

const int policy = 1;
// if true, send to station 9
bool semaphore = true;
// if wait = true, then the belt precedeed by another belt has to wait (to avoid belts skipping a step)
bool wait = true;
// if stop_process is false, then the system can process a piece (always false except for station 9 (3), where verifier[9] = !semaphore
bool stop_process[NS + NP];</declaration>
	<template>
		<name>Synchronizer</name>
		<declaration>clock c;

void initialize() {
    int i, j, count = 0;
    id temp; 

    /*belt[5][length[5] - 1] =  true;
    belt[5][length[5] - 2] =  true;
    belt[10][length[10] - 1] = true;*/
    
    // place starting pieces on the first belt segment
    for (i = 0; i &lt; NPC; i++) {
        belt[0][i] = true;
    }
    
    // set canRelease vector to all true
    for (i = 0; i &lt; NP; i++) {
        canRelease[i] = true;
    }

    // update prev_id and unique_prev vectors
    for (i = 0; i &lt; NS; i++) {
        count = 0;
	    for (j = 0; j &lt; NS + NP; j++) {
		    if (next[j] == i) {
			    count++;
			    temp = j;
		    }
	    }
	    if (count &lt;= 1) {
		    unique_prev[i] = true;
	    }
	    prev_id[i] = temp;
    }
}</declaration>
		<location id="id0" x="42" y="8">
			<committed/>
		</location>
		<location id="id1" x="42" y="-153">
			<committed/>
		</location>
		<location id="id2" x="-119" y="-153">
			<committed/>
		</location>
		<location id="id3" x="-119" y="8">
			<label kind="invariant" x="-144" y="25">c &lt;= 1</label>
		</location>
		<location id="id4" x="-297" y="8">
			<name x="-322" y="25">Start</name>
			<committed/>
		</location>
		<init ref="id4"/>
		<transition>
			<source ref="id0"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-68" y="-17">synch4!</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="51" y="-85">synch3!</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-68" y="-178">synch2!</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-178" y="-102">c == 1</label>
			<label kind="synchronisation" x="-187" y="-85">synch1!</label>
			<label kind="assignment" x="-170" y="-68">c = 0</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-272" y="8">sync_initialize!</label>
			<label kind="assignment" x="-263" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">ConveyorBelt</name>
		<declaration>void move() {
    int i, j, index;
    bool flag = true;

    for (i = 0; i &lt; NS; i++) {
        // move piece on station's belt
        if (next[i] &gt;= NS &amp;&amp; ready[next[i] - NS] &amp;&amp; belt[i][length[i] - 1]) {
            belt[i][length[i] - 1] = false;
            belt[next[i]][0] = true;
            busy[next[i] - NS] = true;
        }
    }

    // for each belt segment
    for (i = 0; i &lt; NS; i++) {  
        // move pieces forward by 1 slot
        for (j = length[i] - 1; j &gt; 0; j--) {
            if (!belt[i][j]) {
                belt[i][j] = belt[i][j - 1];
                belt[i][j - 1] = false;
            }
        }
        
        // if the segment is at a confluence point
        if (!unique_prev[i]) {
            // scan the next[] array to look for the next previous component with a piece available
	        for (j = prev_id[i] + 1; j &lt; NS + NP + prev_id[i]; j++) {
		        if (flag &amp;&amp; next[j % (NS + NP)] == i &amp;&amp; belt[j % (NS + NP)][length[j % (NS + NP)] - 1]) {
			        prev_id[i] = j % (NS + NP);
			        flag = false;
		        }
	        }
        // if not, there could be a branch and next[] might have changed
        } else {
            for (j = 0; j &lt; NS + NP; j++) {
                if (next[j] == i) {
                    prev_id[i] = j;
                }
            }
        }

        // if legal, take one piece from the previous component and
        // add it at the start of the belt
        if (prev_id[i] &gt;= NS &amp;&amp; !belt[i][0] &amp;&amp; belt[prev_id[i]][length[prev_id[i]] - 1]) {
            belt[i][0] = true;
            removeLast(prev_id[i]);
        } else if (prev_id[i] &lt; NS &amp;&amp; !belt[i][0] &amp;&amp; belt[prev_id[i]][length[prev_id[i]] - 1]) {
            if (i &lt; NS &amp;&amp; wait &amp;&amp; i &gt; prev_id[i]) {
                wait = !wait;
            } else {
                if (i &lt; NS &amp;&amp; !wait &amp;&amp; i &gt; prev_id[i]) {
                    wait = !wait;
                }
                belt[i][0] = true;
                removeLast(prev_id[i]);
            }
        }
    }
}</declaration>
		<location id="id5" x="-1266" y="-1232">
			<name x="-1292" y="-1215">Moving</name>
		</location>
		<init ref="id5"/>
		<transition>
			<source ref="id5"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-1292" y="-1376">synch2?</label>
			<label kind="assignment" x="-1292" y="-1359">move()</label>
			<nail x="-1300" y="-1334"/>
			<nail x="-1232" y="-1334"/>
		</transition>
	</template>
	<template>
		<name>TEST_Station</name>
		<parameter>id s_id, int mean, int pos</parameter>
		<declaration>int counter;
int pt;
double box;
int test_valore = 3;

void move() {
    int i;

    // move pieces forward by 1 slot
    for (i = length[s_id] - 1; i &gt; 0; i--) {
        if (!belt[s_id][i]) {
            belt[s_id][i] = belt[s_id][i - 1];
            belt[s_id][i - 1] = false;
        }
    }
}

//if the processing station is on the last slot of it's conveyor belt or further away(physically impossible) it will be moved to the second-last spot 
void fixStationPos() {
        int thisStationLenght;
        int j;
          for ( j = 0; j &lt;NS+NP; j++) {
            //cycle untile next[j] is the station's belt
            if (next[j]==s_id) {
                thisStationLenght = length[next[j]];
                //check if the station is in the last belt slot or further
                if (pos &gt;= thisStationLenght) {
                    //move staition in second-last spot
                    pos=thisStationLenght-1;
                }
            }
        }
    
}</declaration>
		<location id="id6" x="-2992" y="-3408">
		</location>
		<location id="id7" x="-2992" y="-3111">
		</location>
		<location id="id8" x="-2609" y="-3111">
		</location>
		<location id="id9" x="-2609" y="-3536">
			<name x="-2635" y="-3579">Ready</name>
			<committed/>
		</location>
		<location id="id10" x="-2992" y="-3536">
			<name x="-3017" y="-3578">Empty</name>
		</location>
		<location id="id11" x="-2992" y="-3273">
		</location>
		<location id="id12" x="-3153" y="-3621">
			<name x="-3163" y="-3655">start</name>
		</location>
		<branchpoint id="id13" x="-3128" y="-3051">
		</branchpoint>
		<init ref="id12"/>
		<transition>
			<source ref="id9"/>
			<target ref="id10"/>
			<label kind="guard" x="-2856" y="-3493">!busy[s_id - NS]</label>
			<label kind="synchronisation" x="-2822" y="-3476">synch3?</label>
			<label kind="assignment" x="-2873" y="-3459">ready[s_id - NS] = false</label>
			<nail x="-2652" y="-3493"/>
			<nail x="-2941" y="-3493"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id7"/>
			<label kind="assignment" x="-3110" y="-3017">pt = pt - 1</label>
			<label kind="probability" x="-3110" y="-3000">1</label>
			<nail x="-3128" y="-3017"/>
			<nail x="-2992" y="-3017"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id7"/>
			<label kind="assignment" x="-3103" y="-3136">counter++</label>
			<label kind="probability" x="-3171" y="-3102">98</label>
			<nail x="-3128" y="-3111"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id7"/>
			<label kind="assignment" x="-3111" y="-3051">counter++, pt++</label>
			<label kind="probability" x="-3035" y="-3077">1</label>
			<nail x="-2992" y="-3051"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id13"/>
			<label kind="guard" x="-3110" y="-3115">counter &lt; pt</label>
			<label kind="synchronisation" x="-3110" y="-3098">synch1?</label>
		</transition>
		<transition>
			<source ref="id12"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="-3102" y="-3638">sync_initialize?</label>
			<label kind="assignment" x="-3102" y="-3621">fixStationPos()</label>
		</transition>
		<transition>
			<source ref="id6"/>
			<target ref="id10"/>
			<label kind="guard" x="-3178" y="-3510">!belt[s_id][length[s_id] - 1]</label>
			<label kind="synchronisation" x="-3060" y="-3493">synch3?</label>
			<label kind="assignment" x="-3153" y="-3476">busy[s_id - NS] = false</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id6"/>
			<label kind="guard" x="-3169" y="-3357">belt[s_id][length[s_id] - 1]</label>
			<label kind="synchronisation" x="-3059" y="-3340">synch2?</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id11"/>
			<label kind="guard" x="-3246" y="-3306">!belt[s_id][length[s_id] - 1]</label>
			<label kind="synchronisation" x="-3137" y="-3289">synch2?</label>
			<label kind="assignment" x="-3128" y="-3272">move()</label>
			<nail x="-3068" y="-3298"/>
			<nail x="-3068" y="-3247"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id11"/>
			<label kind="guard" x="-3263" y="-3213">counter &gt;= pt &amp;&amp; canRelease[s_id - NS]</label>
			<label kind="synchronisation" x="-3060" y="-3196">synch1?</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id7"/>
			<label kind="guard" x="-2890" y="-3103">belt[s_id][pos - 1]</label>
			<label kind="synchronisation" x="-2831" y="-3085">synch1?</label>
			<label kind="assignment" x="-2856" y="-3068">counter = 1, pt = mean</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-2533" y="-3128">synch2?</label>
			<label kind="assignment" x="-2533" y="-3111">move()</label>
			<nail x="-2542" y="-3086"/>
			<nail x="-2542" y="-3128"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id8"/>
			<label kind="guard" x="-2601" y="-3298">busy[s_id - NS]</label>
			<label kind="synchronisation" x="-2601" y="-3281">synch3?</label>
			<label kind="assignment" x="-2601" y="-3264">ready[s_id - NS] = false</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id9"/>
			<label kind="guard" x="-2889" y="-3594">!stop_process[s_id-1]</label>
			<label kind="synchronisation" x="-2898" y="-3578">pieceAvailable[s_id - NS]?</label>
			<label kind="assignment" x="-2890" y="-3561">ready[s_id - NS] = true</label>
		</transition>
	</template>
	<template>
		<name>ProcessingStation</name>
		<parameter>id s_id, int mean, int pos</parameter>
		<declaration>int counter;
int pt;
double box;
int test_valore = 3;

void move() {
    int i;

    // move pieces forward by 1 slot
    for (i = length[s_id] - 1; i &gt; 0; i--) {
        if (!belt[s_id][i]) {
            belt[s_id][i] = belt[s_id][i - 1];
            belt[s_id][i - 1] = false;
        }
    }
}

//if the processing station is on the last slot of it's conveyor belt or further away(physically impossible) it will be moved to the second-last spot 
void fixStationPos() {
        int thisStationLenght;
        int j;
          for ( j = 0; j &lt;NS+NP; j++) {
            //cycle untile next[j] is the station's belt
            if (next[j]==s_id) {
                thisStationLenght = length[next[j]];
                //check if the station is in the last belt slot or further
                if (pos &gt;= thisStationLenght) {
                    //move staition in second-last spot
                    pos=thisStationLenght-1;
                }
            }
        }
    
}</declaration>
		<location id="id14" x="-2133" y="-2796">
		</location>
		<location id="id15" x="-2133" y="-2499">
		</location>
		<location id="id16" x="-1750" y="-2499">
		</location>
		<location id="id17" x="-1750" y="-2924">
			<name x="-1776" y="-2967">Ready</name>
			<committed/>
		</location>
		<location id="id18" x="-2133" y="-2924">
			<name x="-2158" y="-2966">Empty</name>
		</location>
		<location id="id19" x="-2133" y="-2661">
		</location>
		<location id="id20" x="-2294" y="-3009">
			<name x="-2304" y="-3043">start</name>
		</location>
		<init ref="id20"/>
		<transition>
			<source ref="id15"/>
			<target ref="id15"/>
			<label kind="guard" x="-2329" y="-2524">counter &lt; pt</label>
			<label kind="synchronisation" x="-2303" y="-2507">synch1?</label>
			<label kind="assignment" x="-2312" y="-2490">counter++</label>
			<nail x="-2244" y="-2524"/>
			<nail x="-2244" y="-2465"/>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id18"/>
			<label kind="guard" x="-1997" y="-2881">!busy[s_id - NS]</label>
			<label kind="synchronisation" x="-1963" y="-2864">synch3?</label>
			<label kind="assignment" x="-2014" y="-2847">ready[s_id - NS] = false</label>
			<nail x="-1793" y="-2881"/>
			<nail x="-2082" y="-2881"/>
		</transition>
		<transition>
			<source ref="id20"/>
			<target ref="id18"/>
			<label kind="synchronisation" x="-2243" y="-3026">sync_initialize?</label>
			<label kind="assignment" x="-2243" y="-3009">fixStationPos()</label>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id18"/>
			<label kind="guard" x="-2319" y="-2898">!belt[s_id][length[s_id] - 1]</label>
			<label kind="synchronisation" x="-2201" y="-2881">synch3?</label>
			<label kind="assignment" x="-2294" y="-2864">busy[s_id - NS] = false</label>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id14"/>
			<label kind="guard" x="-2310" y="-2745">belt[s_id][length[s_id] - 1]</label>
			<label kind="synchronisation" x="-2200" y="-2728">synch2?</label>
		</transition>
		<transition>
			<source ref="id19"/>
			<target ref="id19"/>
			<label kind="guard" x="-2387" y="-2694">!belt[s_id][length[s_id] - 1]</label>
			<label kind="synchronisation" x="-2278" y="-2677">synch2?</label>
			<label kind="assignment" x="-2269" y="-2660">move()</label>
			<nail x="-2209" y="-2686"/>
			<nail x="-2209" y="-2635"/>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id19"/>
			<label kind="guard" x="-2404" y="-2601">counter &gt;= pt &amp;&amp; canRelease[s_id - NS]</label>
			<label kind="synchronisation" x="-2201" y="-2584">synch1?</label>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id15"/>
			<label kind="guard" x="-1997" y="-2490">belt[s_id][pos - 1]</label>
			<label kind="synchronisation" x="-1938" y="-2472">synch1?</label>
			<label kind="assignment" x="-2031" y="-2456">counter = 1, pt = mean</label>
		</transition>
		<transition>
			<source ref="id16"/>
			<target ref="id16"/>
			<label kind="synchronisation" x="-1674" y="-2516">synch2?</label>
			<label kind="assignment" x="-1674" y="-2499">move()</label>
			<nail x="-1683" y="-2474"/>
			<nail x="-1683" y="-2516"/>
		</transition>
		<transition>
			<source ref="id17"/>
			<target ref="id16"/>
			<label kind="guard" x="-1742" y="-2686">busy[s_id - NS]</label>
			<label kind="synchronisation" x="-1742" y="-2669">synch3?</label>
			<label kind="assignment" x="-1742" y="-2652">ready[s_id - NS] = false</label>
		</transition>
		<transition>
			<source ref="id18"/>
			<target ref="id17"/>
			<label kind="guard" x="-2030" y="-2982">!stop_process[s_id-1]</label>
			<label kind="synchronisation" x="-2039" y="-2966">pieceAvailable[s_id - NS]?</label>
			<label kind="assignment" x="-2031" y="-2949">ready[s_id - NS] = true</label>
		</transition>
	</template>
	<template>
		<name>StationSensor</name>
		<parameter>id s_id, id b_id</parameter>
		<location id="id21" x="-2847" y="-3247">
			<committed/>
		</location>
		<location id="id22" x="-3136" y="-3247">
		</location>
		<branchpoint id="id23" x="-3009" y="-3145">
		</branchpoint>
		<branchpoint id="id24" x="-3000" y="-3340">
		</branchpoint>
		<init ref="id22"/>
		<transition>
			<source ref="id23"/>
			<target ref="id22"/>
			<label kind="probability" x="-3043" y="-3102">99</label>
			<nail x="-3017" y="-3111"/>
			<nail x="-3077" y="-3111"/>
		</transition>
		<transition>
			<source ref="id23"/>
			<target ref="id21"/>
			<label kind="probability" x="-2982" y="-3128">1</label>
			<nail x="-2907" y="-3145"/>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id23"/>
			<label kind="guard" x="-3095" y="-3213">!belt[b_id][length[b_id] - 1]</label>
			<label kind="synchronisation" x="-3094" y="-3196">synch1?</label>
			<nail x="-3078" y="-3145"/>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id21"/>
			<label kind="probability" x="-2983" y="-3340">99</label>
			<nail x="-2898" y="-3340"/>
		</transition>
		<transition>
			<source ref="id24"/>
			<target ref="id22"/>
			<label kind="probability" x="-3009" y="-3383">1</label>
			<nail x="-3026" y="-3374"/>
			<nail x="-3085" y="-3374"/>
		</transition>
		<transition>
			<source ref="id22"/>
			<target ref="id24"/>
			<label kind="guard" x="-3095" y="-3323">belt[b_id][length[b_id] - 1]</label>
			<label kind="synchronisation" x="-3094" y="-3306">synch1?</label>
			<nail x="-3094" y="-3340"/>
		</transition>
		<transition>
			<source ref="id21"/>
			<target ref="id22"/>
			<label kind="synchronisation" x="-3051" y="-2983">pieceAvailable[s_id - NS]!</label>
			<nail x="-2881" y="-2983"/>
			<nail x="-3076" y="-2984"/>
		</transition>
	</template>
	<template>
		<name>QueueSensor</name>
		<parameter>id s_id, id b_id, int pos</parameter>
		<location id="id25" x="-306" y="-68">
		</location>
		<branchpoint id="id26" x="-510" y="-68">
		</branchpoint>
		<branchpoint id="id27" x="-93" y="-68">
		</branchpoint>
		<init ref="id25"/>
		<transition>
			<source ref="id26"/>
			<target ref="id25"/>
			<label kind="assignment" x="-561" y="-136">canRelease[s_id - NS] = true</label>
			<label kind="probability" x="-569" y="-93">99</label>
			<nail x="-612" y="-136"/>
			<nail x="-374" y="-136"/>
		</transition>
		<transition>
			<source ref="id26"/>
			<target ref="id25"/>
			<label kind="assignment" x="-586" y="0">canRelease[s_id - NS] = false</label>
			<label kind="probability" x="-561" y="-59">1</label>
			<nail x="-612" y="0"/>
			<nail x="-374" y="0"/>
		</transition>
		<transition>
			<source ref="id27"/>
			<target ref="id25"/>
			<label kind="assignment" x="-212" y="0">canRelease[s_id - NS] = true</label>
			<label kind="probability" x="-59" y="-68">1</label>
			<nail x="9" y="0"/>
			<nail x="-238" y="0"/>
		</transition>
		<transition>
			<source ref="id27"/>
			<target ref="id25"/>
			<label kind="assignment" x="-229" y="-136">canRelease[s_id - NS] = false</label>
			<label kind="probability" x="-59" y="-93">99</label>
			<nail x="9" y="-136"/>
			<nail x="-238" y="-136"/>
		</transition>
		<transition>
			<source ref="id25"/>
			<target ref="id26"/>
			<label kind="guard" x="-493" y="-68">!belt[b_id][pos]</label>
			<label kind="synchronisation" x="-493" y="-51">synch1?</label>
		</transition>
		<transition>
			<source ref="id25"/>
			<target ref="id27"/>
			<label kind="guard" x="-212" y="-68">belt[b_id][pos]</label>
			<label kind="synchronisation" x="-212" y="-51">synch1?</label>
		</transition>
	</template>
	<template>
		<name>control_station</name>
		<parameter>int policy, id s_id, id b_id</parameter>
		<declaration>void control() {
    if (policy == 1) {
        if (semaphore) {
            next[2] = 4;
        } else {
            next[2] = 9;
        }
    }
    semaphore = !semaphore;
    stop_process[s_id-1] = !semaphore;
    /*if (policy == 2) {
        if (verifier[s_id-1]) {
            verifier[s_id-1] = !verifier[s_id-1];
            next[2] = 4;
        } else {
            verifier[s_id-1] = !verifier[s_id-1];
            next[2] = 9;
        }
    }*/

}</declaration>
		<location id="id28" x="-297" y="-42">
		</location>
		<location id="id29" x="-51" y="-42">
		</location>
		<init ref="id28"/>
		<transition>
			<source ref="id29"/>
			<target ref="id28"/>
			<label kind="assignment" x="-187" y="25">control()</label>
			<nail x="-161" y="25"/>
		</transition>
		<transition>
			<source ref="id28"/>
			<target ref="id29"/>
			<label kind="guard" x="-246" y="-161">belt[b_id][length[b_id]-1]</label>
			<label kind="synchronisation" x="-195" y="-144">synch1?</label>
			<nail x="-170" y="-119"/>
		</transition>
	</template>
	<system>// Place template instantiations here.
Synch = Synchronizer();
Belt = ConveyorBelt();
Station1 = ProcessingStation(7, 5, 4);
Station2 = ProcessingStation(8, 5, 4); // works also with 100 and all the other processing times set to 1, to check if the queue sensor works properly
Station3 = ProcessingStation(9, 5, 3); // works also with 30 (this cause the controller to change policy because the station is occupied for long time)
Station4 = ProcessingStation(10, 5, 4);
Station5 = ProcessingStation(11, 5, 4);
Station6 = ProcessingStation(12, 5, 3);

StationSensor1 = StationSensor(7, 0);
StationSensor2 = StationSensor(8, 1);
StationSensor3 = StationSensor(9, 2);
StationSensor4 = StationSensor(10, 3);
StationSensor5 = StationSensor(11, 4);
StationSensor6 = StationSensor(12, 6);

QueueSensor1 = QueueSensor(12, 0, 2);
QueueSensor2 = QueueSensor(7, 1, 10);        // previously 5 instead of 10
QueueSensor3 = QueueSensor(8, 4, 4);
QueueSensor4 = QueueSensor(9, 3, 1);
QueueSensor5 = QueueSensor(10, 6, 3);
QueueSensor6 = QueueSensor(11, 6, 3);

//test = FlowController(1);
controller = control_station(1, 9, 2);

// List one or more processes to be composed into a system.
system Synch, Belt,
        Station1, Station2, Station3, Station4, Station5, Station6,
        StationSensor1, StationSensor2, StationSensor3, StationSensor4, StationSensor5, StationSensor6,
        controller,
        QueueSensor1, QueueSensor2, QueueSensor3, QueueSensor4, QueueSensor5, QueueSensor6;</system>
	<queries>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
	</queries>
</nta>
