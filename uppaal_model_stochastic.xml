<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>/// ********** CONSTANTS

// number of conveyor belt segments
const int NS = 7;
// max length of a conveyor belt segment
const int L = 25;
// number of processing stations
const int NP = 6;


/// ********** CUSTOM TYPES

// id type
typedef int[0, NS + NP - 1] id;


/// ********** SYSTEM SETTINGS
// Three configurations possible: to select them it is possible to uncomment the preferred configuration and comment the other two

//    configuration 1: standard configuration, simulates the functioning of a full functional system. 
//                     All the pieces starts from the first belt, the belt speed is fixed to 2 slots over time unit.

//    configuration 2: simulates the functioning of the system after the resolution of a fault (so, the system has half worked 
//                     pieces in some belts and so the initial set fo pieces is not only in the first belt), in this simulation 
//                     the belt speed has been increased up to 5 steps over time unit.

//    configuration 3: simulates a real case scenario in which the position of the queue sensors is poorly chosen, 
//                     in this case the query related to the number of pieces circulating a belt is not satisfied. 
//                     In particular through this configuratioin is demonstrated that this query does not depend on
//                     the code itself but only on the physical displacement of the sensors in the system.




//########### CONFIG 1 ##############
// conveyor belt speed [slots/s]

const int speed = 2;

// processing stations processing time
const int processing_time[NP] = {4, 40, 10, 10, 10, 10};
// Standard deviation for each Processing Station
const double dev[NP] = {0.4, 0.4, 0.4, 0.1, 0.1, 0.1};

// Fail probability of the Station Sensor
const int[0, 100] fail_s_vecctor[NP] = {1, 1, 1, 1, 1, 1};
// Fail probability of the Queue Sensor
const int[0, 100] fail_q_vecctor[NP] = {1, 1, 1, 1, 1, 1};

// processing stations location on belts
const int P_pos[NP] = {4, 4, 3, 4, 4, 3};

// number of pieces
const int NPC[NS] = {10, 0, 0, 0, 0, 0, 0};

//branch switching-policy
// 1: alternate between the 2 branches (waiting for a piece to be available) if they are available
// 2: take always the external loop (always station 5 over stations 3 and 4)
// 3: take always the internal loop (always stations 3 and 4 over station 5) except if station 3 is occupied, then take the outer loop
const int policy = 1;

//queue sensors
const int qs_pos[NP] = {3, 4, 10, 10, 3, 3}; //choose queue sensor position on belt
const bool qs_active[NP] = {true, true, true, true, true, true}; //choose if queue sensor is active


//########### CONFIG 2 ##############
/*
// conveyor belt speed [slots/s]
const int speed = 5;

// processing stations processing time
const int processing_time[NP] = {4, 40, 10, 10, 10, 10};
// Standard deviation for each Processing Station
const double dev[NP] = {0.45, 0.3, 0.3, 0.45, 0.4, 0.4};

// Fail probability of the Station Sensor
const int[0, 100] fail_s_vecctor[NP] = {1, 1, 1, 1, 1, 1};
// Fail probability of the Queue Sensor
const int[0, 100] fail_q_vecctor[NP] = {1, 1, 1, 1, 1, 1};

// processing stations location on belts
const int P_pos[NP] = {4, 4, 3, 4, 4, 3};

// number of pieces
const int NPC[NS] = {10, 3, 5, 0, 0, 0, 2};

//branch switching-policy
// 1: alternate between the 2 branches (waiting for a piece to be available) if they are available
// 2: take always the external loop (always station 5 over stations 3 and 4)
// 3: take always the internal loop (always stations 3 and 4 over station 5) except if station 3 is occupied, then take the outer loop
const int policy = 1;

//queue sensors
const int qs_pos[NP] = {3, 4, 10, 10, 3, 3}; //choose queue sensor position on belt
const bool qs_active[NP] = {true, true, true, true, true, true}; //choose if queue sensor is active
*/

//########### CONFIG 3 ##############
/*
// conveyor belt speed [slots/s]
const int speed = 1;

// processing stations processing time
const int processing_time[NP] = {4, 13, 15, 10, 10, 10};
// Standard deviation for each Processing Station
const double dev[NP] = {0.4, 0.4, 0.4, 0.1, 0.1, 0.1};

// Fail probability of the Station Sensor
const int[0, 100] fail_s_vecctor[NP] = {1, 1, 1, 1, 1, 1};
// Fail probability of the Queue Sensor
const int[0, 100] fail_q_vecctor[NP] = {1, 1, 1, 1, 1, 1};

// processing stations location on belts
const int P_pos[NP] = {4, 4, 3, 4, 4, 3};

// number of pieces
const int NPC[NS] = {10, 0, 0, 0, 0, 0, 0};

//branch switching-policy
// 1: alternate between the 2 branches (waiting for a piece to be available) if they are available
// 2: take always the external loop (always station 5 over stations 3 and 4)
// 3: take always the internal loop (always stations 3 and 4 over station 5) except if station 3 is occupied, then take the outer loop
const int policy = 3;

//queue sensors
const int qs_pos[NP] = {3, 14, 10, 10, 3, 3}; //choose queue sensor position on belt
const bool qs_active[NP] = {true, true, true, true, true, true}; //choose if queue sensor is active
*/




/// ********** EXTRA SETTINGS

// id of following component
id next[NS + NP] = {7, 8, 4, 10, 11, 6, 12, 1, 2, 3, 6, 5, 0};

// length of each conveyor belt segment
const int length[NS + NP] = {13, 16, 25, 4, 13, 2, 5, 5, 5, 4, 9, 6, 4};



/// ********** CHANNELS

// channel to synchronize belts movement
broadcast chan synch1, synch2, synch3, synch4,sync_initialize;
// 
broadcast chan pieceAvailable[NP];


/// ********** OTHER DATA STRUCTURES

// stations busy processing
bool busy[NP];
// stations ready to accept a new piece
bool ready[NP];
// stations that can release a piece
bool canRelease[NP];
// conveyor belt segments matrix
bool belt[NS + NP][L];
// id of component preceding a belt segment
id prev_id[NS];
// true if the previous component is unique
bool unique_prev[NS];
// belt semaphore
bool blocked[NS];



/// ********** SELECTOR OF STATIONS DATA STRUCTURES

// if true, send to station 9
bool semaphore = true;
// if wait = true, then the belt precedeed by another belt has to wait (to avoid belts skipping a step)
bool wait = true;
// if stop_process is false, then the system can process a piece (always false except for station 9 (3), where verifier[9] = !semaphore
bool stop_process[NS + NP];




/// ********** FUNCTIONS

// remove last piece from belt segment
void removeLast(id b_id) {
    belt[b_id][length[b_id] - 1] = false;
}
// set the busy state of a processing station
void setBusy(id s_id, bool s) {
    busy[s_id - NS] = s;
}
// set the done state of a processing station
void setDone(id s_id, bool s) {
    //done[s_id - NS] = s;
}

// it cpunts the total number of pieces
int nPieces() {
    int i, j, count = 0;
    for (i = 0; i &lt; NS + NP; i++) {
        for (j = 0; j &lt; L; j++) {
            if (belt[i][j]) {
                count++;
            }
        }
    }
    return count;
}

// checks if the Query of the queue sensor is true
bool isQuery_True(id b_id, int pos) {
    int i;
    bool check = true;
    for  (i = length[b_id] - 1; i &gt;= pos; i--) {
        if (!belt[b_id][i]) {
            check = false;
        }
    }

    if (!check or !belt[b_id][pos - 1]){
        return true;
    } else{
        return false;
    }
}

// checks if the queue is full
bool isQueueFull(id b_id, int pos) {
    int i;
    bool check = true;
    for  (i = length[b_id] - 1; i &gt;= pos; i--) {
        if (!belt[b_id][i]) {
            check = false;
        }
    }
    return check;
}

// counts the total pieces inserted in the belt in the initialization
int total_initial_pieces() {
    int total_sum;
    int i;

    for (i = 0; i &lt; NS; i++) {
        total_sum = total_sum + NPC[i];
    }

    return total_sum;
}
</declaration>
	<template>
		<name>Synchronizer</name>
		<declaration>clock c;
bool con;

void initialize() {
    int i, j, count = 0;
    id temp;
    
    // place starting pieces on the belts segments
    for (j = 0; j &lt; NS; j++) {
        for (i = 0; i &lt; NPC[j]; i++) {
            belt[j][i] = true;
        }
    }
    // set canRelease vector to all true
    for (i = 0; i &lt; NP; i++) {
        canRelease[i] = true;
    }

    // update prev_id and unique_prev vectors
    for (i = 0; i &lt; NS; i++) {
        count = 0;
	    for (j = 0; j &lt; NS + NP; j++) {
		    if (next[j] == i) {
			    count++;
			    temp = j;
		    }
	    }
	    if (count &lt;= 1) {
		    unique_prev[i] = true;
	    }
	    prev_id[i] = temp;
    }
}</declaration>
		<location id="id0" x="42" y="8">
			<committed/>
		</location>
		<location id="id1" x="42" y="-153">
			<committed/>
		</location>
		<location id="id2" x="-119" y="-153">
			<committed/>
		</location>
		<location id="id3" x="-119" y="8">
			<label kind="invariant" x="-144" y="25">c &lt;= 1</label>
		</location>
		<location id="id4" x="-297" y="8">
			<name x="-322" y="25">Start</name>
			<label kind="exponentialrate" x="-307" y="42">100</label>
			<committed/>
		</location>
		<init ref="id4"/>
		<transition id="id5">
			<source ref="id0"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-68" y="-17">synch4!</label>
		</transition>
		<transition id="id6">
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="51" y="-85">synch3!</label>
		</transition>
		<transition id="id7">
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-68" y="-178">synch2!</label>
		</transition>
		<transition id="id8">
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-178" y="-102">c == 1</label>
			<label kind="synchronisation" x="-187" y="-85">synch1!</label>
			<label kind="assignment" x="-280" y="-68">c = 0, con = !con</label>
		</transition>
		<transition id="id9">
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-272" y="8">sync_initialize!</label>
			<label kind="assignment" x="-263" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">ConveyorBelt</name>
		<declaration>void move() {
    int i, j, index;
    bool flag = true;

    for (i = 0; i &lt; NS; i++) {
        // move piece on station's belt
        if (next[i] &gt;= NS &amp;&amp; ready[next[i] - NS] &amp;&amp; belt[i][length[i] - 1]) {
        //if (next[i] &gt;= NS &amp;&amp; belt[i][length[i] - 1]) {
            belt[i][length[i] - 1] = false;
            belt[next[i]][0] = true;
            busy[next[i] - NS] = true;
        }
    }

    // for each belt segment
    for (i = 0; i &lt; NS; i++) {  
        // move pieces forward by 1 slot
        for (j = length[i] - 1; j &gt; 0; j--) {
            if (!belt[i][j]) {
                belt[i][j] = belt[i][j - 1];
                belt[i][j - 1] = false;
            }
        }
        
        // if the segment is at a confluence point
        if (!unique_prev[i]) {
            // scan the next[] array to look for the next previous component with a piece available
	        for (j = prev_id[i] + 1; j &lt; NS + NP + prev_id[i]; j++) {
		        if (flag &amp;&amp; next[j % (NS + NP)] == i &amp;&amp; belt[j % (NS + NP)][length[j % (NS + NP)] - 1]) {
			        prev_id[i] = j % (NS + NP);
			        flag = false;
		        }
	        }
        // if not, there could be a branch and next[] might have changed
        } else {
            for (j = 0; j &lt; NS + NP; j++) {
                if (next[j] == i) {
                    prev_id[i] = j;
                }
            }
        }

        // if legal, take one piece from the previous component and
        // add it at the start of the belt
        if (prev_id[i] &gt;= NS &amp;&amp; !belt[i][0] &amp;&amp; belt[prev_id[i]][length[prev_id[i]] - 1]) {
            belt[i][0] = true;
            removeLast(prev_id[i]);
        } else if (prev_id[i] &lt; NS &amp;&amp; !belt[i][0] &amp;&amp; belt[prev_id[i]][length[prev_id[i]] - 1]) {
            if (i &lt; NS &amp;&amp; wait &amp;&amp; i &gt; prev_id[i]) {
                wait = !wait;
            } else {
                if (i &lt; NS &amp;&amp; !wait &amp;&amp; i &gt; prev_id[i]) {
                    wait = !wait;
                }
                belt[i][0] = true;
                removeLast(prev_id[i]);
            }
        }
    }
}</declaration>
		<location id="id10" x="-1266" y="-1232">
			<name x="-1292" y="-1215">Moving</name>
		</location>
		<init ref="id10"/>
		<transition id="id11">
			<source ref="id10"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="-1292" y="-1376">synch2?</label>
			<label kind="assignment" x="-1292" y="-1359">move()</label>
			<nail x="-1300" y="-1334"/>
			<nail x="-1232" y="-1334"/>
		</transition>
	</template>
	<template>
		<name>ProcessingStation</name>
		<parameter>id s_id, int mean, double dev, int pos</parameter>
		<declaration>int counter;
int pt;

void move() {
    int i;

    // move pieces forward by 1 slot
    for (i = length[s_id] - 1; i &gt; 0; i--) {
        if (!belt[s_id][i]) {
            belt[s_id][i] = belt[s_id][i - 1];
            belt[s_id][i - 1] = false;
        }
    }
}

//if the processing station is on the last slot of it's conveyor belt or further away(physically impossible) it will be moved to the second-last spot 
void fixStationPos() {
        int thisStationLenght;
        int j;
          for ( j = 0; j &lt;NS+NP; j++) {
            //cycle untile next[j] is the station's belt
            if (next[j]==s_id) {
                thisStationLenght = length[next[j]];
                //check if the station is in the last belt slot or further
                if (pos &gt;= thisStationLenght) {
                    //move staition in second-last spot
                    pos=thisStationLenght-1;
                }
            }
        }
    
}

void select_pt() {
    pt = fint(random_normal(mean, dev));
    }



int n_Pieces() {
    int i, c = 0;
    for (i = 0; i &lt; length[s_id]; i++) {
        if (belt[s_id][i]) {
            c++;
        }
    }
    return c;
}</declaration>
		<location id="id12" x="-2304" y="-2830">
		</location>
		<location id="id13" x="-2304" y="-2533">
		</location>
		<location id="id14" x="-1921" y="-2533">
		</location>
		<location id="id15" x="-1921" y="-2958">
			<name x="-1947" y="-3001">Ready</name>
			<label kind="exponentialrate" x="-1904" y="-2966">21</label>
		</location>
		<location id="id16" x="-2304" y="-2958">
			<name x="-2329" y="-3000">Empty</name>
		</location>
		<location id="id17" x="-2304" y="-2695">
		</location>
		<location id="id18" x="-2465" y="-3043">
			<name x="-2475" y="-3077">start</name>
		</location>
		<init ref="id18"/>
		<transition id="id19">
			<source ref="id18"/>
			<target ref="id16"/>
			<label kind="synchronisation" x="-2414" y="-3060">sync_initialize?</label>
			<label kind="assignment" x="-2414" y="-3043">fixStationPos()</label>
		</transition>
		<transition id="id20">
			<source ref="id12"/>
			<target ref="id16"/>
			<label kind="guard" x="-2567" y="-2924">!belt[s_id][length[s_id] - 1]</label>
			<label kind="synchronisation" x="-2371" y="-2907">synch3?</label>
			<label kind="assignment" x="-2516" y="-2890">busy[s_id - NS] = false</label>
		</transition>
		<transition id="id21">
			<source ref="id17"/>
			<target ref="id12"/>
			<label kind="guard" x="-2558" y="-2779">belt[s_id][length[s_id] - 1]</label>
			<label kind="synchronisation" x="-2371" y="-2762">synch2?</label>
		</transition>
		<transition id="id22">
			<source ref="id17"/>
			<target ref="id17"/>
			<label kind="guard" x="-2635" y="-2728">!belt[s_id][length[s_id] - 1]</label>
			<label kind="synchronisation" x="-2448" y="-2711">synch2?</label>
			<label kind="assignment" x="-2439" y="-2694">move()</label>
			<nail x="-2380" y="-2720"/>
			<nail x="-2380" y="-2669"/>
		</transition>
		<transition id="id23">
			<source ref="id13"/>
			<target ref="id17"/>
			<label kind="guard" x="-2642" y="-2635">counter &gt;= pt &amp;&amp; canRelease[s_id - NS]</label>
			<label kind="synchronisation" x="-2371" y="-2618">synch1?</label>
		</transition>
		<transition id="id24">
			<source ref="id13"/>
			<target ref="id13"/>
			<label kind="guard" x="-2490" y="-2558">counter &lt; pt</label>
			<label kind="synchronisation" x="-2448" y="-2542">synch1?</label>
			<label kind="assignment" x="-2465" y="-2525">counter++</label>
			<nail x="-2380" y="-2559"/>
			<nail x="-2380" y="-2508"/>
		</transition>
		<transition id="id25">
			<source ref="id14"/>
			<target ref="id13"/>
			<label kind="guard" x="-2202" y="-2525">belt[s_id][pos - 1]</label>
			<label kind="synchronisation" x="-2150" y="-2507">synch1?</label>
			<label kind="assignment" x="-2210" y="-2490">counter = 1, select_pt()</label>
		</transition>
		<transition id="id26">
			<source ref="id14"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="-1845" y="-2550">synch2?</label>
			<label kind="assignment" x="-1845" y="-2533">move()</label>
			<nail x="-1854" y="-2508"/>
			<nail x="-1854" y="-2550"/>
		</transition>
		<transition id="id27">
			<source ref="id15"/>
			<target ref="id14"/>
			<label kind="guard" x="-1913" y="-2720">busy[s_id - NS]</label>
			<label kind="synchronisation" x="-1913" y="-2703">synch3?</label>
			<label kind="assignment" x="-1913" y="-2686">ready[s_id - NS] = false</label>
		</transition>
		<transition id="id28">
			<source ref="id16"/>
			<target ref="id15"/>
			<label kind="guard" x="-2193" y="-3017">!stop_process[s_id-1]</label>
			<label kind="synchronisation" x="-2210" y="-3000">pieceAvailable[s_id - NS]?</label>
			<label kind="assignment" x="-2202" y="-2983">ready[s_id - NS] = true</label>
		</transition>
	</template>
	<template>
		<name>StationSensor</name>
		<parameter>id s_id, id b_id, int fail</parameter>
		<location id="id29" x="-3264" y="-3434">
			<committed/>
		</location>
		<location id="id30" x="-3672" y="-3434">
			<label kind="exponentialrate" x="-3714" y="-3442">100</label>
		</location>
		<location id="id31" x="-3570" y="-3570">
			<label kind="exponentialrate" x="-3578" y="-3561">100</label>
		</location>
		<location id="id32" x="-3570" y="-3298">
			<label kind="exponentialrate" x="-3578" y="-3281">100</label>
		</location>
		<branchpoint id="id33" x="-3434" y="-3298"/>
		<branchpoint id="id34" x="-3434" y="-3570"/>
		<init ref="id30"/>
		<transition id="id35">
			<source ref="id33"/>
			<target ref="id30"/>
			<label kind="probability" x="-3451" y="-3272">100 - fail</label>
			<nail x="-3502" y="-3230"/>
			<nail x="-3604" y="-3230"/>
		</transition>
		<transition id="id36">
			<source ref="id33"/>
			<target ref="id29"/>
			<label kind="probability" x="-3408" y="-3315">fail</label>
		</transition>
		<transition id="id37">
			<source ref="id32"/>
			<target ref="id33"/>
		</transition>
		<transition id="id38">
			<source ref="id30"/>
			<target ref="id32"/>
			<label kind="guard" x="-3595" y="-3366">!belt[b_id][length[b_id] - 1]</label>
			<label kind="synchronisation" x="-3595" y="-3349">synch1?</label>
		</transition>
		<transition id="id39">
			<source ref="id30"/>
			<target ref="id31"/>
			<label kind="guard" x="-3595" y="-3536">belt[b_id][length[b_id] - 1]</label>
			<label kind="synchronisation" x="-3595" y="-3519">synch1?</label>
		</transition>
		<transition id="id40">
			<source ref="id34"/>
			<target ref="id30"/>
			<label kind="probability" x="-3451" y="-3604">fail</label>
			<nail x="-3502" y="-3638"/>
			<nail x="-3604" y="-3638"/>
		</transition>
		<transition id="id41">
			<source ref="id34"/>
			<target ref="id29"/>
			<label kind="probability" x="-3408" y="-3578">100 - fail</label>
		</transition>
		<transition id="id42">
			<source ref="id31"/>
			<target ref="id34"/>
		</transition>
		<transition id="id43">
			<source ref="id29"/>
			<target ref="id30"/>
			<label kind="synchronisation" x="-3493" y="-3434">pieceAvailable[s_id - NS]!</label>
			<nail x="-3366" y="-3434"/>
			<nail x="-3604" y="-3434"/>
		</transition>
	</template>
	<template>
		<name>QueueSensor</name>
		<parameter>id s_id, id b_id, int pos, bool active, int fail</parameter>
		<location id="id44" x="-782" y="0">
			<label kind="exponentialrate" x="-790" y="25">100</label>
		</location>
		<location id="id45" x="-1020" y="0">
			<label kind="exponentialrate" x="-1037" y="8">100</label>
		</location>
		<location id="id46" x="-544" y="0">
			<label kind="exponentialrate" x="-561" y="8">100</label>
		</location>
		<branchpoint id="id47" x="-476" y="0"/>
		<branchpoint id="id48" x="-1088" y="0"/>
		<init ref="id44"/>
		<transition id="id49">
			<source ref="id48"/>
			<target ref="id44"/>
			<label kind="assignment" x="-1037" y="-68">canRelease[s_id - NS] = true</label>
			<label kind="probability" x="-1181" y="-51">100 - fail</label>
			<nail x="-1054" y="-68"/>
			<nail x="-850" y="-68"/>
		</transition>
		<transition id="id50">
			<source ref="id48"/>
			<target ref="id44"/>
			<label kind="assignment" x="-1045" y="68">canRelease[s_id - NS] = false</label>
			<label kind="probability" x="-1113" y="34">fail</label>
			<nail x="-1054" y="68"/>
			<nail x="-850" y="68"/>
		</transition>
		<transition id="id51">
			<source ref="id47"/>
			<target ref="id44"/>
			<label kind="assignment" x="-714" y="68">canRelease[s_id - NS] = true</label>
			<label kind="probability" x="-476" y="25">fail</label>
			<nail x="-510" y="68"/>
			<nail x="-714" y="68"/>
		</transition>
		<transition id="id52">
			<source ref="id47"/>
			<target ref="id44"/>
			<label kind="assignment" x="-714" y="-68">canRelease[s_id - NS] = false</label>
			<label kind="probability" x="-476" y="-34">100 - fail</label>
			<nail x="-510" y="-68"/>
			<nail x="-714" y="-68"/>
		</transition>
		<transition id="id53">
			<source ref="id46"/>
			<target ref="id47"/>
		</transition>
		<transition id="id54">
			<source ref="id45"/>
			<target ref="id48"/>
		</transition>
		<transition id="id55">
			<source ref="id44"/>
			<target ref="id46"/>
			<label kind="guard" x="-722" y="0">active == true &amp;&amp; belt[b_id][pos]</label>
			<label kind="synchronisation" x="-663" y="17">synch1?</label>
		</transition>
		<transition id="id56">
			<source ref="id44"/>
			<target ref="id45"/>
			<label kind="guard" x="-1079" y="0">active ==true &amp;&amp; !belt[b_id][pos]</label>
			<label kind="synchronisation" x="-935" y="17">synch1?</label>
		</transition>
	</template>
	<template>
		<name>control_station</name>
		<parameter>int pol, id s_id, id b_id</parameter>
		<declaration>void control() {
    if (pol == 1) {
        if (semaphore) {
            next[2] = 4;
        } else {
            next[2] = 9;
        }  
        semaphore = !semaphore;
        stop_process[s_id-NS] = !semaphore;
    } 

    if (pol == 2) {
        next[2] = 4;
        stop_process[s_id-NS] = true;
    }

    if (pol == 3) {
        if (!busy[s_id - NS]) {
            next[2] = 9;
            stop_process[s_id-NS] = false;
        } else {
            next[2] = 4;
            stop_process[s_id-NS] = true;
        }
    }
}</declaration>
		<location id="id57" x="-297" y="-42">
		</location>
		<location id="id58" x="-51" y="-42">
			<label kind="exponentialrate" x="-61" y="-8">100</label>
		</location>
		<init ref="id57"/>
		<transition id="id59">
			<source ref="id58"/>
			<target ref="id57"/>
			<label kind="assignment" x="-187" y="25">control()</label>
			<nail x="-161" y="25"/>
		</transition>
		<transition id="id60">
			<source ref="id57"/>
			<target ref="id58"/>
			<label kind="guard" x="-255" y="-161">belt[b_id][length[b_id]-1]</label>
			<label kind="synchronisation" x="-195" y="-144">synch1?</label>
			<nail x="-170" y="-119"/>
		</transition>
	</template>
	<system>// Place template instantiations here.
Synch = Synchronizer();
Belt = ConveyorBelt();

Station1 = ProcessingStation(7, processing_time[0]*speed, dev[0], P_pos[0]);
Station2 = ProcessingStation(8, processing_time[1]*speed, dev[1], P_pos[1]); // works also with 100 and all the other processing times set to 1, to check if the queue sensor works properly
Station3 = ProcessingStation(9, processing_time[2]*speed, dev[2], P_pos[2]); // works also with 30 (this cause the controller to change policy because the station is occupied for long time)
Station4 = ProcessingStation(10, processing_time[3]*speed, dev[3], P_pos[3]);
Station5 = ProcessingStation(11, processing_time[4]*speed, dev[4], P_pos[4]);
Station6 = ProcessingStation(12, processing_time[5]*speed, dev[5], P_pos[5]);

StationSensor1 = StationSensor(7, 0, fail_s_vecctor[0]);
StationSensor2 = StationSensor(8, 1, fail_s_vecctor[1]);
StationSensor3 = StationSensor(9, 2, fail_s_vecctor[2]);
StationSensor4 = StationSensor(10, 3, fail_s_vecctor[3]);
StationSensor5 = StationSensor(11, 4, fail_s_vecctor[4]);
StationSensor6 = StationSensor(12, 6, fail_s_vecctor[5]);

QueueSensor1 = QueueSensor(12, 0, qs_pos[0], qs_active[0], fail_q_vecctor[0]);
QueueSensor2 = QueueSensor(7, 1, qs_pos[1], qs_active[1], fail_q_vecctor[1]);        // previously 5 instead of 10
QueueSensor3 = QueueSensor(8, 4, qs_pos[2], qs_active[2], fail_q_vecctor[2]);
QueueSensor4 = QueueSensor(9, 3, qs_pos[3], qs_active[3], fail_q_vecctor[3]);
QueueSensor5 = QueueSensor(10, 6, qs_pos[4], qs_active[4], fail_q_vecctor[4]);
QueueSensor6 = QueueSensor(11, 6, qs_pos[5], qs_active[5], fail_q_vecctor[5]);

//test = FlowController(1);
controller = control_station(policy, 9, 2);

// List one or more processes to be composed into a system.
system Synch, Belt,
        Station1, Station2, Station3, Station4, Station5, Station6,
        StationSensor1, StationSensor2, StationSensor3, StationSensor4, StationSensor5, StationSensor6,
        controller,
        QueueSensor1, QueueSensor2, QueueSensor3, QueueSensor4, QueueSensor5, QueueSensor6;</system>
	<queries>
		<query>
			<formula>simulate[&lt;=300]{Synch.con}</formula>
			<comment>The plant never incurs in deadlock. (prototype)
</comment>
			<result outcome="success" type="quality" timestamp="2023-07-17 18:27:12 +0200">
				<plot title="Simulations (1)" xaxis="time" yaxis="value">
					<series title="Synch.con" type="l" color="0xff0000" encoding="csv">0.0,0.0
1.0,0.0
1.0,1.0
2.0,1.0
2.0,0.0
3.0,0.0
3.0,1.0
4.0,1.0
4.0,0.0
5.0,0.0
5.0,1.0
6.0,1.0
6.0,0.0
7.0,0.0
7.0,1.0
8.0,1.0
8.0,0.0
9.0,0.0
9.0,1.0
10.0,1.0
10.0,0.0
11.0,0.0
11.0,1.0
12.0,1.0
12.0,0.0
13.0,0.0
13.0,1.0
14.0,1.0
14.0,0.0
15.0,0.0
15.0,1.0
16.0,1.0
16.0,0.0
17.0,0.0
17.0,1.0
18.0,1.0
18.0,0.0
19.0,0.0
19.0,1.0
20.0,1.0
20.0,0.0
21.0,0.0
21.0,1.0
22.0,1.0
22.0,0.0
23.0,0.0
23.0,1.0
24.0,1.0
24.0,0.0
25.0,0.0
25.0,1.0
26.0,1.0
26.0,0.0
27.0,0.0
27.0,1.0
28.0,1.0
28.0,0.0
29.0,0.0
29.0,1.0
30.0,1.0
30.0,0.0
31.0,0.0
31.0,1.0
32.0,1.0
32.0,0.0
33.0,0.0
33.0,1.0
34.0,1.0
34.0,0.0
35.0,0.0
35.0,1.0
36.0,1.0
36.0,0.0
37.0,0.0
37.0,1.0
38.0,1.0
38.0,0.0
39.0,0.0
39.0,1.0
40.0,1.0
40.0,0.0
41.0,0.0
41.0,1.0
42.0,1.0
42.0,0.0
43.0,0.0
43.0,1.0
44.0,1.0
44.0,0.0
45.0,0.0
45.0,1.0
46.0,1.0
46.0,0.0
47.0,0.0
47.0,1.0
48.0,1.0
48.0,0.0
49.0,0.0
49.0,1.0
50.0,1.0
50.0,0.0
51.0,0.0
51.0,1.0
52.0,1.0
52.0,0.0
53.0,0.0
53.0,1.0
54.0,1.0
54.0,0.0
55.0,0.0
55.0,1.0
56.0,1.0
56.0,0.0
57.0,0.0
57.0,1.0
58.0,1.0
58.0,0.0
59.0,0.0
59.0,1.0
60.0,1.0
60.0,0.0
61.0,0.0
61.0,1.0
62.0,1.0
62.0,0.0
63.0,0.0
63.0,1.0
64.0,1.0
64.0,0.0
65.0,0.0
65.0,1.0
66.0,1.0
66.0,0.0
67.0,0.0
67.0,1.0
68.0,1.0
68.0,0.0
69.0,0.0
69.0,1.0
70.0,1.0
70.0,0.0
71.0,0.0
71.0,1.0
72.0,1.0
72.0,0.0
73.0,0.0
73.0,1.0
74.0,1.0
74.0,0.0
75.0,0.0
75.0,1.0
76.0,1.0
76.0,0.0
77.0,0.0
77.0,1.0
78.0,1.0
78.0,0.0
79.0,0.0
79.0,1.0
80.0,1.0
80.0,0.0
81.0,0.0
81.0,1.0
82.0,1.0
82.0,0.0
83.0,0.0
83.0,1.0
84.0,1.0
84.0,0.0
85.0,0.0
85.0,1.0
86.0,1.0
86.0,0.0
87.0,0.0
87.0,1.0
88.0,1.0
88.0,0.0
89.0,0.0
89.0,1.0
90.0,1.0
90.0,0.0
91.0,0.0
91.0,1.0
92.0,1.0
92.0,0.0
93.0,0.0
93.0,1.0
94.0,1.0
94.0,0.0
95.0,0.0
95.0,1.0
96.0,1.0
96.0,0.0
97.0,0.0
97.0,1.0
98.0,1.0
98.0,0.0
99.0,0.0
99.0,1.0
100.0,1.0
100.0,0.0
101.0,0.0
101.0,1.0
102.0,1.0
102.0,0.0
103.0,0.0
103.0,1.0
104.0,1.0
104.0,0.0
105.0,0.0
105.0,1.0
106.0,1.0
106.0,0.0
107.0,0.0
107.0,1.0
108.0,1.0
108.0,0.0
109.0,0.0
109.0,1.0
110.0,1.0
110.0,0.0
111.0,0.0
111.0,1.0
112.0,1.0
112.0,0.0
113.0,0.0
113.0,1.0
114.0,1.0
114.0,0.0
115.0,0.0
115.0,1.0
116.0,1.0
116.0,0.0
117.0,0.0
117.0,1.0
118.0,1.0
118.0,0.0
119.0,0.0
119.0,1.0
120.0,1.0
120.0,0.0
121.0,0.0
121.0,1.0
122.0,1.0
122.0,0.0
123.0,0.0
123.0,1.0
124.0,1.0
124.0,0.0
125.0,0.0
125.0,1.0
126.0,1.0
126.0,0.0
127.0,0.0
127.0,1.0
128.0,1.0
128.0,0.0
129.0,0.0
129.0,1.0
130.0,1.0
130.0,0.0
131.0,0.0
131.0,1.0
132.0,1.0
132.0,0.0
133.0,0.0
133.0,1.0
134.0,1.0
134.0,0.0
135.0,0.0
135.0,1.0
136.0,1.0
136.0,0.0
137.0,0.0
137.0,1.0
138.0,1.0
138.0,0.0
139.0,0.0
139.0,1.0
140.0,1.0
140.0,0.0
141.0,0.0
141.0,1.0
142.0,1.0
142.0,0.0
143.0,0.0
143.0,1.0
144.0,1.0
144.0,0.0
145.0,0.0
145.0,1.0
146.0,1.0
146.0,0.0
147.0,0.0
147.0,1.0
148.0,1.0
148.0,0.0
149.0,0.0
149.0,1.0
150.0,1.0
150.0,0.0
151.0,0.0
151.0,1.0
152.0,1.0
152.0,0.0
153.0,0.0
153.0,1.0
154.0,1.0
154.0,0.0
155.0,0.0
155.0,1.0
156.0,1.0
156.0,0.0
157.0,0.0
157.0,1.0
158.0,1.0
158.0,0.0
159.0,0.0
159.0,1.0
160.0,1.0
160.0,0.0
161.0,0.0
161.0,1.0
162.0,1.0
162.0,0.0
163.0,0.0
163.0,1.0
164.0,1.0
164.0,0.0
165.0,0.0
165.0,1.0
166.0,1.0
166.0,0.0
167.0,0.0
167.0,1.0
168.0,1.0
168.0,0.0
169.0,0.0
169.0,1.0
170.0,1.0
170.0,0.0
171.0,0.0
171.0,1.0
172.0,1.0
172.0,0.0
173.0,0.0
173.0,1.0
174.0,1.0
174.0,0.0
175.0,0.0
175.0,1.0
176.0,1.0
176.0,0.0
177.0,0.0
177.0,1.0
178.0,1.0
178.0,0.0
179.0,0.0
179.0,1.0
180.0,1.0
180.0,0.0
181.0,0.0
181.0,1.0
182.0,1.0
182.0,0.0
183.0,0.0
183.0,1.0
184.0,1.0
184.0,0.0
185.0,0.0
185.0,1.0
186.0,1.0
186.0,0.0
187.0,0.0
187.0,1.0
188.0,1.0
188.0,0.0
189.0,0.0
189.0,1.0
190.0,1.0
190.0,0.0
191.0,0.0
191.0,1.0
192.0,1.0
192.0,0.0
193.0,0.0
193.0,1.0
194.0,1.0
194.0,0.0
195.0,0.0
195.0,1.0
196.0,1.0
196.0,0.0
197.0,0.0
197.0,1.0
198.0,1.0
198.0,0.0
199.0,0.0
199.0,1.0
200.0,1.0
200.0,0.0
201.0,0.0
201.0,1.0
202.0,1.0
202.0,0.0
203.0,0.0
203.0,1.0
204.0,1.0
204.0,0.0
205.0,0.0
205.0,1.0
206.0,1.0
206.0,0.0
207.0,0.0
207.0,1.0
208.0,1.0
208.0,0.0
209.0,0.0
209.0,1.0
210.0,1.0
210.0,0.0
211.0,0.0
211.0,1.0
212.0,1.0
212.0,0.0
213.0,0.0
213.0,1.0
214.0,1.0
214.0,0.0
215.0,0.0
215.0,1.0
216.0,1.0
216.0,0.0
217.0,0.0
217.0,1.0
218.0,1.0
218.0,0.0
219.0,0.0
219.0,1.0
220.0,1.0
220.0,0.0
221.0,0.0
221.0,1.0
222.0,1.0
222.0,0.0
223.0,0.0
223.0,1.0
224.0,1.0
224.0,0.0
225.0,0.0
225.0,1.0
226.0,1.0
226.0,0.0
227.0,0.0
227.0,1.0
228.0,1.0
228.0,0.0
229.0,0.0
229.0,1.0
230.0,1.0
230.0,0.0
231.0,0.0
231.0,1.0
232.0,1.0
232.0,0.0
233.0,0.0
233.0,1.0
234.0,1.0
234.0,0.0
235.0,0.0
235.0,1.0
236.0,1.0
236.0,0.0
237.0,0.0
237.0,1.0
238.0,1.0
238.0,0.0
239.0,0.0
239.0,1.0
240.0,1.0
240.0,0.0
241.0,0.0
241.0,1.0
242.0,1.0
242.0,0.0
243.0,0.0
243.0,1.0
244.0,1.0
244.0,0.0
245.0,0.0
245.0,1.0
246.0,1.0
246.0,0.0
247.0,0.0
247.0,1.0
248.0,1.0
248.0,0.0
249.0,0.0
249.0,1.0
250.0,1.0
250.0,0.0
251.0,0.0
251.0,1.0
252.0,1.0
252.0,0.0
253.0,0.0
253.0,1.0
254.0,1.0
254.0,0.0
255.0,0.0
255.0,1.0
256.0,1.0
256.0,0.0
257.0,0.0
257.0,1.0
258.0,1.0
258.0,0.0
259.0,0.0
259.0,1.0
260.0,1.0
260.0,0.0
261.0,0.0
261.0,1.0
262.0,1.0
262.0,0.0
263.0,0.0
263.0,1.0
264.0,1.0
264.0,0.0
265.0,0.0
265.0,1.0
266.0,1.0
266.0,0.0
267.0,0.0
267.0,1.0
268.0,1.0
268.0,0.0
269.0,0.0
269.0,1.0
270.0,1.0
270.0,0.0
271.0,0.0
271.0,1.0
272.0,1.0
272.0,0.0
273.0,0.0
273.0,1.0
274.0,1.0
274.0,0.0
275.0,0.0
275.0,1.0
276.0,1.0
276.0,0.0
277.0,0.0
277.0,1.0
278.0,1.0
278.0,0.0
279.0,0.0
279.0,1.0
280.0,1.0
280.0,0.0
281.0,0.0
281.0,1.0
282.0,1.0
282.0,0.0
283.0,0.0
283.0,1.0
284.0,1.0
284.0,0.0
285.0,0.0
285.0,1.0
286.0,1.0
286.0,0.0
287.0,0.0
287.0,1.0
288.0,1.0
288.0,0.0
289.0,0.0
289.0,1.0
290.0,1.0
290.0,0.0
291.0,0.0
291.0,1.0
292.0,1.0
292.0,0.0
293.0,0.0
293.0,1.0
294.0,1.0
294.0,0.0
295.0,0.0
295.0,1.0
296.0,1.0
296.0,0.0
297.0,0.0
297.0,1.0
298.0,1.0
298.0,0.0
299.0,0.0
299.0,1.0
300.0,1.0
					</series>
					<comment/>
				</plot>
			</result>
		</query>
		<query>
			<formula>Pr[&lt;=300]([] Synch.Start or nPieces() == total_initial_pieces())</formula>
			<comment>After the initialization, the belt will always hold exactly the starting amount of pieces 
--&gt; it never happens that two pieces occupy the same belt slot.
</comment>
			<result outcome="success" type="interval" value="≥ 0.950056 (95% CI)" timestamp="2023-07-17 18:27:28 +0200">
				<details>≥ 0.950056 (95% CI)</details>
			</result>
		</query>
		<query>
			<formula>Pr[&lt;=300]([] 
Station1.n_Pieces() &lt;= 1 and 
Station2.n_Pieces() &lt;= 1 and 
Station3.n_Pieces() &lt;= 1 and 
Station5.n_Pieces() &lt;= 1 and 
Station5.n_Pieces() &lt;= 1 and 
Station6.n_Pieces() &lt;= 1)</formula>
			<comment>No processing station ever holds more than 1 piece.
</comment>
			<result outcome="success" type="interval" value="≥ 0.950056 (95% CI)" timestamp="2023-07-17 18:27:31 +0200">
				<details>≥ 0.950056 (95% CI)</details>
			</result>
		</query>
		<query>
			<formula>Pr[&lt;=500]([] 
( isQuery_True(QueueSensor1.b_id, QueueSensor1.pos) and
isQuery_True(QueueSensor2.b_id, QueueSensor2.pos) and
isQuery_True(QueueSensor3.b_id, QueueSensor3.pos) and
isQuery_True(QueueSensor4.b_id, QueueSensor4.pos) and
isQuery_True(QueueSensor5.b_id, QueueSensor5.pos) and
isQuery_True(QueueSensor6.b_id, QueueSensor6.pos) ) )</formula>
			<comment>No queue ever exceeds the maximum allowed length.

&lt;=0.05 only for the configuration 3 (on purpose)
</comment>
			<result outcome="success" type="interval" value="≥ 0.950056 (95% CI)" timestamp="2023-07-17 18:27:37 +0200">
				<details>≥ 0.950056 (95% CI)</details>
			</result>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
		<query>
			<formula/>
			<comment>// EXTRA QUERIES</comment>
		</query>
		<query>
			<formula>Pr[&lt;=300]([] 
Station1.pt &lt;= processing_time[0]*speed and 
Station2.pt &lt;= processing_time[1]*speed and 
Station3.pt &lt;= processing_time[2]*speed and 
Station4.pt &lt;= processing_time[3]*speed and 
Station5.pt &lt;= processing_time[4]*speed and 
Station6.pt &lt;= processing_time[5]*speed )</formula>
			<comment>EXTRA QUERY
Processing time of every station is never inferior to the requested processing time.

Checked for just one lap</comment>
			<result outcome="success" type="quantity" value="0.879887 ± 0.0445082 (95% CI)" timestamp="2023-07-17 18:27:39 +0200">
				<details>0.879887 ± 0.0445082 (95% CI)</details>
			</result>
		</query>
		<query>
			<formula>Pr[&lt;=1000]([] policy!=2 or (Station3.counter == 0 and Station4.counter ==0 ) )</formula>
			<comment>EXTRA QUERY
If policy = 2 --&gt; never go through stations 3 or 4

Must be verified only for policy 2</comment>
			<result outcome="success" type="interval" value="≥ 0.950056 (95% CI)" timestamp="2023-07-17 18:27:42 +0200">
				<details>≥ 0.950056 (95% CI)</details>
			</result>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
		<query>
			<formula/>
			<comment>// Just for Simulation</comment>
		</query>
		<query>
			<formula>simulate[&lt;=200] {
Station1.pt, processing_time[0]*speed,
Station2.pt, processing_time[1]*speed, 
Station3.pt, processing_time[2]*speed, 
Station4.pt, processing_time[3]*speed, 
Station5.pt, processing_time[4]*speed, 
Station6.pt, processing_time[5]*speed 
}</formula>
			<comment>Simulations of Processing times</comment>
			<result outcome="success" type="quality" timestamp="2023-07-17 18:27:42 +0200">
				<plot title="Simulations (1)" xaxis="time" yaxis="value">
					<series title="Station1.pt" type="l" color="0xff0000" encoding="csv">0.0,0.0
9.0,0.0
9.0,8.0
51.0,8.0
51.0,6.0
63.0,6.0
63.0,7.0
102.0,7.0
102.0,8.0
130.0,8.0
130.0,7.0
200.0,7.0
					</series>
					<series title="processing_time[0] * speed" type="l" color="0xff8000" encoding="csv">0.0,8.0
200.0,8.0
					</series>
					<series title="Station2.pt" type="l" color="0xffff00" encoding="csv">0.0,0.0
39.0,0.0
39.0,79.0
124.0,79.0
124.0,80.0
200.0,80.0
					</series>
					<series title="processing_time[1] * speed" type="l" color="0x80ff00" encoding="csv">0.0,80.0
200.0,80.0
					</series>
					<series title="Station3.pt" type="l" color="0x00ff00" encoding="csv">0.0,0.0
200.0,0.0
					</series>
					<series title="processing_time[2] * speed" type="l" color="0x00ff80" encoding="csv">0.0,20.0
200.0,20.0
					</series>
					<series title="Station4.pt" type="l" color="0x00ffff" encoding="csv">0.0,0.0
200.0,0.0
					</series>
					<series title="processing_time[3] * speed" type="l" color="0x0080ff" encoding="csv">0.0,20.0
200.0,20.0
					</series>
					<series title="Station5.pt" type="l" color="0x0000ff" encoding="csv">0.0,0.0
161.0,0.0
161.0,19.0
200.0,19.0
					</series>
					<series title="processing_time[4] * speed" type="l" color="0x8000ff" encoding="csv">0.0,20.0
200.0,20.0
					</series>
					<series title="Station6.pt" type="l" color="0xff00ff" encoding="csv">0.0,0.0
192.0,0.0
192.0,19.0
200.0,19.0
					</series>
					<series title="processing_time[5] * speed" type="l" color="0xff0080" encoding="csv">0.0,20.0
200.0,20.0
					</series>
					<comment/>
				</plot>
			</result>
		</query>
		<query>
			<formula>simulate[&lt;=200] {
Station1.n_Pieces(), 
Station2.n_Pieces(),
Station3.n_Pieces(),
Station5.n_Pieces(),
Station5.n_Pieces(),
Station6.n_Pieces()
}</formula>
			<comment>Simulation of the total pieces in a Processing station</comment>
			<result outcome="success" type="quality" timestamp="2023-07-17 18:27:42 +0200">
				<plot title="Simulations (1)" xaxis="time" yaxis="value">
					<series title="Station1.n_Pieces()" type="l" color="0xff0000" encoding="csv">0.0,0.0
5.0,0.0
5.032910928334746,1.0
19.0,1.0
19.04135033550336,0.0
20.0,0.0
20.022760217890546,1.0
32.0,1.0
32.03522737917898,0.0
33.0,0.0
33.026581185661556,1.0
46.0,1.0
46.03324333714496,0.0
47.0,0.0
47.02152249929353,1.0
60.0,1.0
60.02347988246149,0.0
61.0,0.0
61.015418533771836,1.0
73.0,1.0
73.04149561852387,0.0
74.0,0.0
74.01494938391686,1.0
86.0,1.0
86.04944762355929,0.0
87.0,0.0
87.01741104536649,1.0
100.0,1.0
100.0449993567235,0.0
101.0,0.0
101.01265281994533,1.0
113.0,1.0
113.02269690565228,0.0
114.0,0.0
114.0278104290338,1.0
126.0,1.0
126.02925565308843,0.0
127.0,0.0
127.03295323211617,1.0
139.0,1.0
139.03746571112748,0.0
200.000002,0.0
					</series>
					<series title="Station2.n_Pieces()" type="l" color="0xffff00" encoding="csv">0.0,0.0
35.0,0.0
35.04232785430307,1.0
120.0,1.0
120.02695957866288,0.0
121.0,0.0
121.030093309823,1.0
200.000002,1.0
					</series>
					<series title="Station3.n_Pieces()" type="l" color="0x00ff00" encoding="csv">0.0,0.0
200.000002,0.0
					</series>
					<series title="Station5.n_Pieces()" type="l" color="0x00ffff" encoding="csv">0.0,0.0
158.0,0.0
158.02810073279804,1.0
184.0,1.0
184.0226826451629,0.0
200.000002,0.0
					</series>
					<series title="Station5.n_Pieces()" type="l" color="0x0000ff" encoding="csv">0.0,0.0
158.0,0.0
158.02810073279804,1.0
184.0,1.0
184.0226826451629,0.0
200.000002,0.0
					</series>
					<series title="Station6.n_Pieces()" type="l" color="0xff00ff" encoding="csv">0.0,0.0
191.0,0.0
191.03092457661376,1.0
200.000002,1.0
					</series>
					<comment/>
				</plot>
			</result>
		</query>
		<query>
			<formula>simulate[&lt;=500] {
isQueueFull(QueueSensor1.b_id, QueueSensor1.pos), !belt[QueueSensor1.b_id][QueueSensor1.pos - 1], isQuery_True(QueueSensor1.b_id, QueueSensor1.pos),
isQueueFull(QueueSensor2.b_id, QueueSensor2.pos), !belt[QueueSensor2.b_id][QueueSensor2.pos - 1], isQuery_True(QueueSensor2.b_id, QueueSensor2.pos),
isQueueFull(QueueSensor3.b_id, QueueSensor3.pos), !belt[QueueSensor3.b_id][QueueSensor3.pos - 1], isQuery_True(QueueSensor3.b_id, QueueSensor3.pos),
isQueueFull(QueueSensor4.b_id, QueueSensor4.pos), !belt[QueueSensor4.b_id][QueueSensor4.pos - 1], isQuery_True(QueueSensor4.b_id, QueueSensor4.pos),
isQueueFull(QueueSensor5.b_id, QueueSensor5.pos), !belt[QueueSensor5.b_id][QueueSensor5.pos - 1], isQuery_True(QueueSensor5.b_id, QueueSensor5.pos),
isQueueFull(QueueSensor6.b_id, QueueSensor6.pos), !belt[QueueSensor6.b_id][QueueSensor6.pos - 1], isQuery_True(QueueSensor6.b_id, QueueSensor6.pos)
}</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2023-07-17 18:27:42 +0200">
				<plot title="Simulations (1)" xaxis="time" yaxis="value">
					<series title="isQueueFull(QueueSensor1.b_id, QueueSensor1.pos)" type="l" color="0xff0000" encoding="csv">0.0,0.0
3.0,0.0
3.019815443373622,1.0
5.0,1.0
5.038759634870142,0.0
500.0,0.0
					</series>
					<series title="!belt[QueueSensor1.b_id][QueueSensor1.pos - 1]" type="l" color="0xff5500" encoding="csv">0.0,1.0
0.0,0.0
3.0,0.0
3.019815443373622,1.0
216.0,1.0
216.04942910256133,0.0
217.0,0.0
217.03747835885295,1.0
302.0,1.0
302.02964948154465,0.0
303.0,0.0
303.019723313442,1.0
404.0,1.0
404.0296326918146,0.0
405.0,0.0
405.04053349210074,1.0
472.0,1.0
472.03291031914716,0.0
473.0,0.0
473.0142283100936,1.0
500.0,1.0
					</series>
					<series title="isQuery_True(QueueSensor1.b_id, QueueSensor1.pos)" type="l" color="0xffaa00" encoding="csv">0.0,1.0
500.0,1.0
					</series>
					<series title="isQueueFull(QueueSensor2.b_id, QueueSensor2.pos)" type="l" color="0xffff00" encoding="csv">0.0,0.0
500.0,0.0
					</series>
					<series title="!belt[QueueSensor2.b_id][QueueSensor2.pos - 1]" type="l" color="0xaaff00" encoding="csv">0.0,1.0
21.0,1.0
21.018566819293195,0.0
22.0,0.0
22.02857015650401,1.0
34.0,1.0
34.03522384878122,0.0
35.0,0.0
35.02197807335667,1.0
47.0,1.0
47.02319848788485,0.0
48.0,0.0
48.01756672412953,1.0
61.0,1.0
61.01567158017992,0.0
62.0,0.0
62.03214759764323,1.0
74.0,1.0
74.03773503886777,0.0
75.0,0.0
75.03448142539389,1.0
88.0,1.0
88.03158792323435,0.0
89.0,0.0
89.02669528259362,1.0
102.0,1.0
102.03932642712232,0.0
103.0,0.0
103.01458556102666,1.0
115.0,1.0
115.02232928467865,0.0
116.0,0.0
116.02551110254767,1.0
128.0,1.0
128.01838508395272,0.0
129.0,0.0
129.02590490024318,1.0
142.0,1.0
142.0269140186434,0.0
143.0,0.0
143.0307409864104,1.0
243.0,1.0
243.02285567714802,0.0
244.0,0.0
244.03205786194238,1.0
328.0,1.0
328.04531396651583,0.0
329.0,0.0
329.03145991416585,1.0
431.0,1.0
431.01449291322524,0.0
432.0,0.0
432.0157257231911,1.0
499.0,1.0
499.0372807240924,0.0
500.0,0.0
					</series>
					<series title="isQuery_True(QueueSensor2.b_id, QueueSensor2.pos)" type="l" color="0x55ff00" encoding="csv">0.0,1.0
500.0,1.0
					</series>
					<series title="isQueueFull(QueueSensor3.b_id, QueueSensor3.pos)" type="l" color="0x00ff00" encoding="csv">0.0,0.0
500.0,0.0
					</series>
					<series title="!belt[QueueSensor3.b_id][QueueSensor3.pos - 1]" type="l" color="0x00ff55" encoding="csv">0.0,1.0
154.0,1.0
154.02129920320468,0.0
155.0,0.0
155.03079178393673,1.0
240.0,1.0
240.02175685448424,0.0
241.0,0.0
241.03416747367524,1.0
409.0,1.0
409.050227264736,0.0
410.0,0.0
410.03491367498225,1.0
495.0,1.0
495.02364824853214,0.0
496.0,0.0
496.0203129209663,1.0
500.0,1.0
					</series>
					<series title="isQuery_True(QueueSensor3.b_id, QueueSensor3.pos)" type="l" color="0x00ffaa" encoding="csv">0.0,1.0
500.0,1.0
					</series>
					<series title="isQueueFull(QueueSensor4.b_id, QueueSensor4.pos)" type="l" color="0x00ffff" encoding="csv">0.0,1.0
500.0,1.0
					</series>
					<series title="!belt[QueueSensor4.b_id][QueueSensor4.pos - 1]" type="l" color="0x00aaff" encoding="csv">0.0,1.0
500.0,1.0
					</series>
					<series title="isQuery_True(QueueSensor4.b_id, QueueSensor4.pos)" type="l" color="0x0055ff" encoding="csv">0.0,1.0
500.0,1.0
					</series>
					<series title="isQueueFull(QueueSensor5.b_id, QueueSensor5.pos)" type="l" color="0x0000ff" encoding="csv">0.0,0.0
500.0,0.0
					</series>
					<series title="!belt[QueueSensor5.b_id][QueueSensor5.pos - 1]" type="l" color="0x5500ff" encoding="csv">0.0,1.0
188.0,1.0
188.0170464837647,0.0
189.0,0.0
189.06568327241948,1.0
274.0,1.0
274.0158284782115,0.0
275.0,0.0
275.026375096312,1.0
376.0,1.0
376.0141497472472,0.0
377.0,0.0
377.02187950104025,1.0
443.0,1.0
443.0296564746002,0.0
444.0,0.0
444.04052814232335,1.0
500.0,1.0
					</series>
					<series title="isQuery_True(QueueSensor5.b_id, QueueSensor5.pos)" type="l" color="0xaa00ff" encoding="csv">0.0,1.0
500.0,1.0
					</series>
					<series title="isQueueFull(QueueSensor6.b_id, QueueSensor6.pos)" type="l" color="0xff00ff" encoding="csv">0.0,0.0
500.0,0.0
					</series>
					<series title="!belt[QueueSensor6.b_id][QueueSensor6.pos - 1]" type="l" color="0xff00aa" encoding="csv">0.0,1.0
188.0,1.0
188.0170464837647,0.0
189.0,0.0
189.06568327241948,1.0
274.0,1.0
274.0158284782115,0.0
275.0,0.0
275.026375096312,1.0
376.0,1.0
376.0141497472472,0.0
377.0,0.0
377.02187950104025,1.0
443.0,1.0
443.0296564746002,0.0
444.0,0.0
444.04052814232335,1.0
500.0,1.0
					</series>
					<series title="isQuery_True(QueueSensor6.b_id, QueueSensor6.pos)" type="l" color="0xff0055" encoding="csv">0.0,1.0
500.0,1.0
					</series>
					<comment/>
				</plot>
			</result>
		</query>
	</queries>
</nta>
