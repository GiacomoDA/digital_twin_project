<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>/// ********** CONSTANTS
clock global;

// number of conveyor belt segments
const int NS = 7;
// max length of a conveyor belt segment
const int L = 25;
// number of processing stations
const int NP = 6;


// Variable that check if a station has peices on its belt or it is empty
bool station_working[NP];
// boolean variable that the Station Sensor set to true if it senses a piece. This let the belt to feed the proper station
bool go[NP];


/// ********** CUSTOM TYPES

// id type
typedef int[0, NS + NP - 1] id;


/// ********** SYSTEM SETTINGS
// Three configurations possible: to select them it is possible to uncomment the preferred configuration and comment the other two

//    configuration 1: standard configuration, simulates the functioning of a full functional system. 
//                     All the pieces starts from the first belt, the belt speed is fixed to 2 slots over time unit.

//    configuration 2: simulates the functioning of the system after the resolution of a fault (so, the system has half worked 
//                     pieces in some belts and so the initial set fo pieces is not only in the first belt), in this simulation 
//                     the belt speed has been increased up to 5 steps over time unit.

//    configuration 3: simulates a real case scenario in which the position of the queue sensors is poorly chosen, 
//                     in this case the query related to the number of pieces circulating a belt is not satisfied. 
//                     In particular through this configuratioin is demonstrated that this query does not depend on
//                     the code itself but only on the physical displacement of the sensors in the system.




//########### CONFIG 1 ##############
// conveyor belt speed [slots/s]

const int speed = 1;

// max probability scale for the Station Sensor
const int p_max_s = 1000;
// max probability scale for the Queue Sensor
const int p_max_q = 1000;

// processing stations processing time
const int processing_time[NP] = {4, 40, 10, 10, 10, 10};
// Standard deviation for each Processing Station
const double dev[NP] = {0.4, 0.4, 0.1, 0.1, 0.1, 0.1};

// Fail probability of the Station Sensor
const int[0, p_max_s] fail_s_vecctor[NP] = {20, 10, 20, 5, 10, 10};
// Fail probability of the Queue Sensor
const int[0, p_max_q] fail_q_vecctor[NP] = {1, 1, 1, 1, 1, 1};

// processing stations location on belts
const int P_pos[NP] = {4, 4, 3, 4, 4, 3};

// number of pieces
const int NPC[NS] = {10, 0, 0, 0, 0, 0, 0};

//branch switching-policy
// 1: alternate between the 2 branches (waiting for a piece to be available) if they are available
// 2: take always the external loop (always station 5 over stations 3 and 4)
// 3: take always the internal loop (always stations 3 and 4 over station 5) except if station 3 is occupied, then take the outer loop
const int policy = 1;

//queue sensors
const int qs_pos[NP] = {3, 4, 10, 10, 3, 3}; //choose queue sensor position on belt
const bool qs_active[NP] = {true, true, true, true, true, true}; //choose if queue sensor is active


//########### CONFIG 2 ##############
/*
// conveyor belt speed [slots/s]
const int speed = 4;

// max probability scale for the Station Sensor
const int p_max_s = 1000;
// max probability scale for the Queue Sensor
const int p_max_q = 1000;

// processing stations processing time
const int processing_time[NP] =  {4, 6, 2, 8, 3, 5}; //{14, 30, 50, 18, 23, 50};//
// Standard deviation for each Processing Station
const double dev[NP] = {0.1, 0.1, 0.1, 0.15, 0.1, 0.1};

// Fail probability of the Station Sensor
const int[0, p_max_s] fail_s_vecctor[NP] = {3, 2, 1, 2, 1, 3};
// Fail probability of the Queue Sensor
const int[0, p_max_q] fail_q_vecctor[NP] = {1, 2, 1, 3, 2, 1};

// processing stations location on belts
const int P_pos[NP] = {4, 4, 3, 4, 4, 3};

// number of pieces
const int NPC[NS] = {2, 3, 1, 3, 0, 1, 1};

//branch switching-policy
// 1: alternate between the 2 branches (waiting for a piece to be available) if they are available
// 2: take always the external loop (always station 5 over stations 3 and 4)
// 3: take always the internal loop (always stations 3 and 4 over station 5) except if station 3 is occupied, then take the outer loop
const int policy = 1;

//queue sensors
const int qs_pos[NP] = {3, 4, 10, 10, 3, 3}; //choose queue sensor position on belt
const bool qs_active[NP] = {true, true, true, true, true, true}; //choose if queue sensor is active
*/

//########### CONFIG 3 ##############
/*
// conveyor belt speed [slots/s]
const int speed = 1;

// max probability scale for the Station Sensor
const int p_max_s = 1000;
// max probability scale for the Queue Sensor
const int p_max_q = 1000;

// processing stations processing time
const int processing_time[NP] = {4, 13, 15, 10, 10, 10}; //{4, 9, 12, 5, 8, 5};
// Standard deviation for each Processing Station
const double dev[NP] = {0.4, 0.4, 0.4, 0.1, 0.1, 0.1};

// Fail probability of the Station Sensor
const int[0, p_max_s] fail_s_vecctor[NP] = {8, 5, 7, 8, 7, 7};
// Fail probability of the Queue Sensor
const int[0, p_max_q] fail_q_vecctor[NP] = {1, 1, 1, 1, 1, 1};

// processing stations location on belts
const int P_pos[NP] = {4, 4, 3, 4, 4, 3};

// number of pieces
const int NPC[NS] = {10, 0, 0, 0, 0, 0, 0};

//branch switching-policy
// 1: alternate between the 2 branches (waiting for a piece to be available) if they are available
// 2: take always the external loop (always station 5 over stations 3 and 4)
// 3: take always the internal loop (always stations 3 and 4 over station 5) except if station 3 is occupied, then take the outer loop
const int policy = 2;

//queue sensors
const int qs_pos[NP] = {3, 14, 10, 10, 3, 3}; //choose queue sensor position on belt
const bool qs_active[NP] = {true, true, true, true, true, true}; //choose if queue sensor is active
*/




/// ********** EXTRA SETTINGS

// id of following component
id next[NS + NP] = {7, 8, 4, 10, 11, 6, 12, 1, 2, 3, 6, 5, 0};

// length of each conveyor belt segment
const int length[NS + NP] = {13, 16, 25, 4, 13, 2, 5, 5, 5, 4, 9, 6, 4};



/// ********** CHANNELS

// channel to synchronize belts movement
broadcast chan synch1, synch2, synch3, synch4,sync_initialize;


/// ********** OTHER DATA STRUCTURES

// stations busy processing
bool busy[NP];
// stations ready to accept a new piece
bool ready[NP];
// stations that can release a piece
bool canRelease[NP];
// conveyor belt segments matrix
bool belt[NS + NP][L];
// id of component preceding a belt segment
id prev_id[NS];
// true if the previous component is unique
bool unique_prev[NS];
// belt semaphore
bool blocked[NS];



/// ********** SELECTOR OF STATIONS DATA STRUCTURES

// if true, send to station 9
bool semaphore = true;
// if wait = true, then the belt precedeed by another belt has to wait (to avoid belts skipping a step)
bool wait = true;
// if stop_process is false, then the system can process a piece (always false except for station 9 (3), where verifier[9] = !semaphore
bool stop_process[NS + NP];




/// ********** FUNCTIONS

// remove last piece from belt segment
void removeLast(id b_id) {
    belt[b_id][length[b_id] - 1] = false;
}
// set the busy state of a processing station
void setBusy(id s_id, bool s) {
    busy[s_id - NS] = s;
}
// set the done state of a processing station
void setDone(id s_id, bool s) {
    //done[s_id - NS] = s;
}

// it cpunts the total number of pieces
int nPieces() {
    int i, j, count = 0;
    for (i = 0; i &lt; NS + NP; i++) {
        for (j = 0; j &lt; L; j++) {
            if (belt[i][j]) {
                count++;
            }
        }
    }
    return count;
}

// checks if the Query of the queue sensor is true
bool isQuery_True(id b_id, int pos) {
    int i;
    bool check = true;
    for  (i = length[b_id] - 1; i &gt;= pos; i--) {
        if (!belt[b_id][i]) {
            check = false;
        }
    }

    if (!check or !belt[b_id][pos - 1]){
        return true;
    } else{
        return false;
    }
}

// checks if the queue is full
bool isQueueFull(id b_id, int pos) {
    int i;
    for  (i = length[b_id] - 1; i &gt;= pos; i--) {
        if (!belt[b_id][i]) {
            return false;
        }
    }
    return true;
}

// counts the total pieces inserted in the belt in the initialization
int total_initial_pieces() {
    int total_sum;
    int i;

    for (i = 0; i &lt; NS; i++) {
        total_sum = total_sum + NPC[i];
    }

    return total_sum;
}
</declaration>
	<template>
		<name>Synchronizer</name>
		<declaration>clock c;
bool evolution;

void initialize() {
    int i, j, count = 0;
    id temp;
    
    // place starting pieces on the belts segments
    for (j = 0; j &lt; NS; j++) {
        for (i = 0; i &lt; NPC[j]; i++) {
            belt[j][i] = true;
        }
    }
    // set canRelease vector to all true
    for (i = 0; i &lt; NP; i++) {
        canRelease[i] = true;
    }

    // update prev_id and unique_prev vectors
    for (i = 0; i &lt; NS; i++) {
        count = 0;
	    for (j = 0; j &lt; NS + NP; j++) {
		    if (next[j] == i) {
			    count++;
			    temp = j;
		    }
	    }
	    if (count &lt;= 1) {
		    unique_prev[i] = true;
	    }
	    prev_id[i] = temp;
    }
}</declaration>
		<location id="id0" x="42" y="8">
			<committed/>
		</location>
		<location id="id1" x="42" y="-153">
			<committed/>
		</location>
		<location id="id2" x="-119" y="-153">
			<committed/>
		</location>
		<location id="id3" x="-119" y="8">
			<label kind="invariant" x="-144" y="25">c &lt;= 1</label>
		</location>
		<location id="id4" x="-297" y="8">
			<name x="-322" y="25">Start</name>
			<label kind="exponentialrate" x="-307" y="42">100</label>
			<committed/>
		</location>
		<init ref="id4"/>
		<transition id="id5">
			<source ref="id0"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-68" y="-17">synch4!</label>
		</transition>
		<transition id="id6">
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="51" y="-85">synch3!</label>
		</transition>
		<transition id="id7">
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-68" y="-178">synch2!</label>
		</transition>
		<transition id="id8">
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-178" y="-102">c == 1</label>
			<label kind="synchronisation" x="-187" y="-85">synch1!</label>
			<label kind="assignment" x="-306" y="-68">c = 0,
evolution = !evolution</label>
		</transition>
		<transition id="id9">
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-272" y="8">sync_initialize!</label>
			<label kind="assignment" x="-263" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">ConveyorBelt</name>
		<declaration>void move() {
    int i, j, index;
    bool flag = true;

    for (i = 0; i &lt; NS; i++) {
        // move piece on station's belt
        if (next[i] &gt;= NS &amp;&amp; go[next[i] - NS] &amp;&amp; belt[i][length[i] - 1] &amp;&amp; !belt[next[i]][0]) {
            belt[i][length[i] - 1] = false;
            belt[next[i]][0] = true;
            busy[next[i] - NS] = true;
        }
    }

    // for each belt segment
    for (i = 0; i &lt; NS; i++) {  
        // move pieces forward by 1 slot
        for (j = length[i] - 1; j &gt; 0; j--) {
            if (!belt[i][j]) {
                belt[i][j] = belt[i][j - 1];
                belt[i][j - 1] = false;
            }
        }
        
        // if the segment is at a confluence point
        if (!unique_prev[i]) {
            // scan the next[] array to look for the next previous component with a piece available
	        for (j = prev_id[i] + 1; j &lt; NS + NP + prev_id[i]; j++) {
		        if (flag &amp;&amp; next[j % (NS + NP)] == i &amp;&amp; belt[j % (NS + NP)][length[j % (NS + NP)] - 1]) {
			        prev_id[i] = j % (NS + NP);
			        flag = false;
		        }
	        }
        // if not, there could be a branch and next[] might have changed
        } else {
            for (j = 0; j &lt; NS + NP; j++) {
                if (next[j] == i) {
                    prev_id[i] = j;
                }
            }
        }

        // if legal, take one piece from the previous component and
        // add it at the start of the belt
        if (prev_id[i] &gt;= NS &amp;&amp; !belt[i][0] &amp;&amp; belt[prev_id[i]][length[prev_id[i]] - 1]) {
            belt[i][0] = true;
            removeLast(prev_id[i]);
        } else if (prev_id[i] &lt; NS &amp;&amp; !belt[i][0] &amp;&amp; belt[prev_id[i]][length[prev_id[i]] - 1]) {
            if (i &lt; NS &amp;&amp; wait &amp;&amp; i &gt; prev_id[i]) {
                wait = !wait;
            } else {
                if (i &lt; NS &amp;&amp; !wait &amp;&amp; i &gt; prev_id[i]) {
                    wait = !wait;
                }
                belt[i][0] = true;
                removeLast(prev_id[i]);
            }
        }
    }
}</declaration>
		<location id="id10" x="-1266" y="-1232">
			<name x="-1292" y="-1215">Moving</name>
		</location>
		<init ref="id10"/>
		<transition id="id11">
			<source ref="id10"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="-1292" y="-1376">synch2?</label>
			<label kind="assignment" x="-1292" y="-1359">move()</label>
			<nail x="-1300" y="-1334"/>
			<nail x="-1232" y="-1334"/>
		</transition>
	</template>
	<template>
		<name>ProcessingStation</name>
		<parameter>id s_id, int mean, double dev, int pos</parameter>
		<declaration>int counter;
int pt;

void move() {
    int i;

    // move pieces forward by 1 slot
    for (i = length[s_id] - 1; i &gt; 0; i--) {
        if (!belt[s_id][i]) {
            belt[s_id][i] = belt[s_id][i - 1];
            belt[s_id][i - 1] = false;
        }
    }
}

//if the processing station is on the last slot of it's conveyor belt or further away(physically impossible) it will be moved to the second-last spot 
void fixStationPos() {
        int thisStationLenght;
        int j;
          for ( j = 0; j &lt;NS+NP; j++) {
            //cycle untile next[j] is the station's belt
            if (next[j]==s_id) {
                thisStationLenght = length[next[j]];
                //check if the station is in the last belt slot or further
                if (pos &gt;= thisStationLenght) {
                    //move staition in second-last spot
                    pos=thisStationLenght-1;
                }
            }
        }
    
}

// selects the processing time accordingly to a gaussian distribution
void select_pt() {
    pt = fint(random_normal(mean, dev));
}


// returns the actual number of pieces on the belt of the station
int n_Pieces() {
    int i, c = 0;
    for (i = 0; i &lt; length[s_id]; i++) {
        if (belt[s_id][i]) {
            c++;
        }
    }
    return c;
}

// Returns true if a piece or more is present on the station belt
bool busy_station() {
    int c;
    c = n_Pieces();

    if (c&gt;0) {
        return true;
    }else{
        return false;
    }
}</declaration>
		<location id="id12" x="-1428" y="-2958">
			<name x="-1453" y="-2941">Empty</name>
		</location>
		<location id="id13" x="-1598" y="-2958">
			<name x="-1608" y="-2992">Start</name>
		</location>
		<location id="id14" x="-909" y="-2966">
			<name x="-943" y="-2949">Working</name>
		</location>
		<init ref="id13"/>
		<transition id="id15">
			<source ref="id14"/>
			<target ref="id12"/>
			<label kind="guard" x="-1300" y="-2788">counter &gt;= pt &amp;&amp; canRelease[s_id - NS]</label>
			<label kind="synchronisation" x="-1028" y="-2771">synch2?</label>
			<label kind="assignment" x="-1020" y="-2754">move()</label>
			<nail x="-1164" y="-2805"/>
		</transition>
		<transition id="id16">
			<source ref="id14"/>
			<target ref="id14"/>
			<label kind="guard" x="-815" y="-2992">counter &lt; pt</label>
			<label kind="synchronisation" x="-815" y="-2975">synch1?</label>
			<label kind="assignment" x="-815" y="-2958">counter++</label>
			<nail x="-832" y="-2992"/>
			<nail x="-832" y="-2924"/>
		</transition>
		<transition id="id17">
			<source ref="id12"/>
			<target ref="id14"/>
			<label kind="guard" x="-1232" y="-3017">belt[s_id][pos - 1]</label>
			<label kind="synchronisation" x="-1232" y="-3000">synch1?</label>
			<label kind="assignment" x="-1232" y="-2983">counter = 1, select_pt()</label>
		</transition>
		<transition id="id18">
			<source ref="id12"/>
			<target ref="id12"/>
			<label kind="guard" x="-1530" y="-3102">!belt[s_id][pos - 1]</label>
			<label kind="synchronisation" x="-1530" y="-3085">synch3?</label>
			<label kind="assignment" x="-1530" y="-3068">move(),
station_working[s_id - NS] = busy_station()</label>
			<nail x="-1453" y="-3017"/>
			<nail x="-1394" y="-3017"/>
		</transition>
		<transition id="id19">
			<source ref="id13"/>
			<target ref="id12"/>
			<label kind="synchronisation" x="-1589" y="-2949">sync_initialize?</label>
			<label kind="assignment" x="-1589" y="-2932">fixStationPos()</label>
		</transition>
	</template>
	<template>
		<name>StationSensor</name>
		<parameter>id s_id, id b_id, int fail</parameter>
		<location id="id20" x="-2949" y="-3434">
			<name x="-2958" y="-3417">Piece_Ready</name>
			<committed/>
		</location>
		<location id="id21" x="-3672" y="-3434">
			<name x="-3714" y="-3417">Empty</name>
			<label kind="exponentialrate" x="-3706" y="-3400">100</label>
		</location>
		<location id="id22" x="-3570" y="-3570">
			<label kind="exponentialrate" x="-3578" y="-3561">100</label>
			<committed/>
		</location>
		<location id="id23" x="-3570" y="-3298">
			<label kind="exponentialrate" x="-3578" y="-3281">100</label>
			<committed/>
		</location>
		<branchpoint id="id24" x="-3119" y="-3298"/>
		<branchpoint id="id25" x="-3119" y="-3570"/>
		<init ref="id21"/>
		<transition id="id26">
			<source ref="id24"/>
			<target ref="id21"/>
			<label kind="assignment" x="-3162" y="-3247">go[s_id - NS] = false</label>
			<label kind="probability" x="-3136" y="-3272">p_max_s - fail</label>
			<nail x="-3187" y="-3230"/>
			<nail x="-3604" y="-3230"/>
		</transition>
		<transition id="id27">
			<source ref="id24"/>
			<target ref="id20"/>
			<label kind="assignment" x="-3034" y="-3349">go[s_id - NS] = true</label>
			<label kind="probability" x="-3093" y="-3315">fail</label>
		</transition>
		<transition id="id28">
			<source ref="id23"/>
			<target ref="id24"/>
		</transition>
		<transition id="id29">
			<source ref="id21"/>
			<target ref="id23"/>
			<label kind="guard" x="-3595" y="-3366">!belt[b_id][length[b_id] - 1] or station_working[s_id - NS]</label>
			<label kind="synchronisation" x="-3595" y="-3349">synch1?</label>
		</transition>
		<transition id="id30">
			<source ref="id21"/>
			<target ref="id22"/>
			<label kind="guard" x="-3612" y="-3502">belt[b_id][length[b_id] - 1] &amp;&amp; !station_working[s_id - NS]</label>
			<label kind="synchronisation" x="-3612" y="-3485">synch1?</label>
		</transition>
		<transition id="id31">
			<source ref="id25"/>
			<target ref="id21"/>
			<label kind="assignment" x="-3153" y="-3638">go[s_id - NS] = false</label>
			<label kind="probability" x="-3136" y="-3604">fail</label>
			<nail x="-3187" y="-3638"/>
			<nail x="-3604" y="-3638"/>
		</transition>
		<transition id="id32">
			<source ref="id25"/>
			<target ref="id20"/>
			<label kind="assignment" x="-3026" y="-3544">go[s_id - NS] = true</label>
			<label kind="probability" x="-3085" y="-3570">p_max_s - fail</label>
		</transition>
		<transition id="id33">
			<source ref="id22"/>
			<target ref="id25"/>
		</transition>
		<transition id="id34">
			<source ref="id20"/>
			<target ref="id21"/>
			<label kind="assignment" x="-3434" y="-3434">go[s_id - NS] = false</label>
			<nail x="-3051" y="-3434"/>
			<nail x="-3604" y="-3434"/>
		</transition>
	</template>
	<template>
		<name>QueueSensor</name>
		<parameter>id s_id, id b_id, int pos, bool active, int fail</parameter>
		<location id="id35" x="-782" y="0">
			<name x="-799" y="17">Empty</name>
			<label kind="exponentialrate" x="-790" y="34">100</label>
		</location>
		<location id="id36" x="-1147" y="0">
			<label kind="exponentialrate" x="-1156" y="8">100</label>
			<committed/>
		</location>
		<location id="id37" x="-382" y="0">
			<label kind="exponentialrate" x="-391" y="8">100</label>
			<committed/>
		</location>
		<branchpoint id="id38" x="-314" y="0"/>
		<branchpoint id="id39" x="-1215" y="0"/>
		<init ref="id35"/>
		<transition id="id40">
			<source ref="id39"/>
			<target ref="id35"/>
			<label kind="assignment" x="-1156" y="-85">canRelease[s_id - NS] = true</label>
			<label kind="probability" x="-1326" y="-51">p_max_q - fail</label>
			<nail x="-1181" y="-68"/>
			<nail x="-850" y="-68"/>
		</transition>
		<transition id="id41">
			<source ref="id39"/>
			<target ref="id35"/>
			<label kind="assignment" x="-1139" y="68">canRelease[s_id - NS] = false</label>
			<label kind="probability" x="-1240" y="34">fail</label>
			<nail x="-1181" y="68"/>
			<nail x="-850" y="68"/>
		</transition>
		<transition id="id42">
			<source ref="id38"/>
			<target ref="id35"/>
			<label kind="assignment" x="-654" y="68">canRelease[s_id - NS] = true</label>
			<label kind="probability" x="-314" y="25">fail</label>
			<nail x="-348" y="68"/>
			<nail x="-714" y="68"/>
		</transition>
		<transition id="id43">
			<source ref="id38"/>
			<target ref="id35"/>
			<label kind="assignment" x="-671" y="-85">canRelease[s_id - NS] = false</label>
			<label kind="probability" x="-323" y="-51">p_max_q - fail</label>
			<nail x="-348" y="-68"/>
			<nail x="-714" y="-68"/>
		</transition>
		<transition id="id44">
			<source ref="id37"/>
			<target ref="id38"/>
		</transition>
		<transition id="id45">
			<source ref="id36"/>
			<target ref="id39"/>
		</transition>
		<transition id="id46">
			<source ref="id35"/>
			<target ref="id37"/>
			<label kind="guard" x="-722" y="0">active == true &amp;&amp; belt[b_id][pos]</label>
			<label kind="synchronisation" x="-663" y="17">synch3?</label>
		</transition>
		<transition id="id47">
			<source ref="id35"/>
			<target ref="id36"/>
			<label kind="guard" x="-1096" y="0">active ==true &amp;&amp; !belt[b_id][pos]</label>
			<label kind="synchronisation" x="-1096" y="17">synch3?</label>
		</transition>
	</template>
	<template>
		<name>control_station</name>
		<parameter>int pol, id s_id, id b_id</parameter>
		<declaration>void control() {
    if (pol == 1) {
        if (semaphore) {
            next[2] = 4;
        } else {
            next[2] = 9;
        }  
        semaphore = !semaphore;
        stop_process[s_id-NS] = !semaphore;
    } 

    if (pol == 2) {
        next[2] = 4;
        stop_process[s_id-NS] = true;
    }

    if (pol == 3) {
        if (!busy[s_id - NS]) {
            next[2] = 9;
            stop_process[s_id-NS] = false;
        } else {
            next[2] = 4;
            stop_process[s_id-NS] = true;
        }
    }
}</declaration>
		<location id="id48" x="-272" y="-34">
		</location>
		<location id="id49" x="-68" y="-34">
			<label kind="exponentialrate" x="-78" y="0">100</label>
		</location>
		<init ref="id48"/>
		<transition id="id50">
			<source ref="id49"/>
			<target ref="id48"/>
			<label kind="assignment" x="-204" y="34">control()</label>
			<nail x="-170" y="34"/>
		</transition>
		<transition id="id51">
			<source ref="id48"/>
			<target ref="id49"/>
			<label kind="guard" x="-271" y="-144">belt[b_id][length[b_id]-1]</label>
			<label kind="synchronisation" x="-195" y="-127">synch1?</label>
			<nail x="-170" y="-102"/>
		</transition>
	</template>
	<system>// Place template instantiations here.
Synch = Synchronizer();
Belt = ConveyorBelt();

Station1 = ProcessingStation(7, processing_time[0]*speed, dev[0]*speed, P_pos[0]);
Station2 = ProcessingStation(8, processing_time[1]*speed, dev[1]*speed, P_pos[1]); // works also with 100 and all the other processing times set to 1, to check if the queue sensor works properly
Station3 = ProcessingStation(9, processing_time[2]*speed, dev[2]*speed, P_pos[2]); // works also with 30 (this cause the controller to change policy because the station is occupied for long time)
Station4 = ProcessingStation(10, processing_time[3]*speed, dev[3]*speed, P_pos[3]);
Station5 = ProcessingStation(11, processing_time[4]*speed, dev[4]*speed, P_pos[4]);
Station6 = ProcessingStation(12, processing_time[5]*speed, dev[5]*speed, P_pos[5]);

StationSensor1 = StationSensor(7, 0, fail_s_vecctor[0]);
StationSensor2 = StationSensor(8, 1, fail_s_vecctor[1]);
StationSensor3 = StationSensor(9, 2, fail_s_vecctor[2]);
StationSensor4 = StationSensor(10, 3, fail_s_vecctor[3]);
StationSensor5 = StationSensor(11, 4, fail_s_vecctor[4]);
StationSensor6 = StationSensor(12, 6, fail_s_vecctor[5]);

QueueSensor1 = QueueSensor(12, 0, qs_pos[0], qs_active[0], fail_q_vecctor[0]);
QueueSensor2 = QueueSensor(7, 1, qs_pos[1], qs_active[1], fail_q_vecctor[1]);        // previously 5 instead of 10
QueueSensor3 = QueueSensor(8, 4, qs_pos[2], qs_active[2], fail_q_vecctor[2]);
QueueSensor4 = QueueSensor(9, 3, qs_pos[3], qs_active[3], fail_q_vecctor[3]);
QueueSensor5 = QueueSensor(10, 6, qs_pos[4], qs_active[4], fail_q_vecctor[4]);
QueueSensor6 = QueueSensor(11, 6, qs_pos[5], qs_active[5], fail_q_vecctor[5]);

//test = FlowController(1);
controller = control_station(policy, 9, 2);

// List one or more processes to be composed into a system.
system Synch, Belt,
        Station1, Station2, Station3, Station4, Station5, Station6,
        StationSensor1, StationSensor2, StationSensor3, StationSensor4, StationSensor5, StationSensor6,
        controller,
        QueueSensor1, QueueSensor2, QueueSensor3, QueueSensor4, QueueSensor5, QueueSensor6;</system>
	<queries>
		<query>
			<formula>simulate[&lt;=30]{Synch.evolution}</formula>
			<comment>The plant never incurs in deadlock. (prototype)

A[] not deadlock</comment>
			<result outcome="success" type="quality" timestamp="2023-07-19 17:08:05 +0200">
				<plot title="Simulations (1)" xaxis="time" yaxis="value">
					<series title="Synch.evolution" type="l" color="0xff0000" encoding="csv">0.0,0.0
1.0,0.0
1.0,1.0
2.0,1.0
2.0,0.0
3.0,0.0
3.0,1.0
4.0,1.0
4.0,0.0
5.0,0.0
5.0,1.0
6.0,1.0
6.0,0.0
7.0,0.0
7.0,1.0
8.0,1.0
8.0,0.0
9.0,0.0
9.0,1.0
10.0,1.0
10.0,0.0
11.0,0.0
11.0,1.0
12.0,1.0
12.0,0.0
13.0,0.0
13.0,1.0
14.0,1.0
14.0,0.0
15.0,0.0
15.0,1.0
16.0,1.0
16.0,0.0
17.0,0.0
17.0,1.0
18.0,1.0
18.0,0.0
19.0,0.0
19.0,1.0
20.0,1.0
20.0,0.0
21.0,0.0
21.0,1.0
22.0,1.0
22.0,0.0
23.0,0.0
23.0,1.0
24.0,1.0
24.0,0.0
25.0,0.0
25.0,1.0
26.0,1.0
26.0,0.0
27.0,0.0
27.0,1.0
28.0,1.0
28.0,0.0
29.0,0.0
29.0,1.0
30.0,1.0
30.000002,0.0
					</series>
					<comment/>
				</plot>
			</result>
		</query>
		<query>
			<formula>Pr[&lt;=300]([] Synch.Start or nPieces() == total_initial_pieces())</formula>
			<comment>After the initialization, the belt will always hold exactly the starting amount of pieces 
--&gt; it never happens that two pieces occupy the same belt slot.

configuration 1: &gt;= 0.95
configuration 2: &gt;= 0.95
configuration 3: &gt;= 0.95
</comment>
			<result outcome="success" type="interval" value="≥ 0.950056 (95% CI)" timestamp="2023-07-19 17:08:21 +0200">
				<details>≥ 0.950056 (95% CI)</details>
			</result>
		</query>
		<query>
			<formula>Pr[&lt;=300]([] 
Station1.n_Pieces() &lt;= 1 and 
Station2.n_Pieces() &lt;= 1 and 
Station3.n_Pieces() &lt;= 1 and 
Station5.n_Pieces() &lt;= 1 and 
Station5.n_Pieces() &lt;= 1 and 
Station6.n_Pieces() &lt;= 1)</formula>
			<comment>No processing station ever holds more than 1 piece.

configuration 1: 0.49 +- 0.05
configuration 2: 0.73 +- 0.05
configuration 3: 0.49 +- 0.05</comment>
			<result outcome="success" type="quantity" value="0.393751 ± 0.0491512 (95% CI)" timestamp="2023-07-19 17:08:33 +0200">
				<details>0.393751 ± 0.0491512 (95% CI)</details>
			</result>
		</query>
		<query>
			<formula>Pr[&lt;=300]([] 
( isQuery_True(QueueSensor1.b_id, QueueSensor1.pos) and
isQuery_True(QueueSensor2.b_id, QueueSensor2.pos) and
isQuery_True(QueueSensor3.b_id, QueueSensor3.pos) and
isQuery_True(QueueSensor4.b_id, QueueSensor4.pos) and
isQuery_True(QueueSensor5.b_id, QueueSensor5.pos) and
isQuery_True(QueueSensor6.b_id, QueueSensor6.pos) ) )</formula>
			<comment>No queue ever exceeds the maximum allowed length.

&lt;=0.05 only for the configuration 3 (on purpose)

configuration 1: &gt;= 0.95
configuration 2: 0.74 +- 0.05
configuration 3: &lt;= 0.05		--&gt; on purpose (Queue Sensor positions chosen poorly)</comment>
			<result outcome="success" type="quantity" value="0.969349 ± 0.0303669 (95% CI)" timestamp="2023-07-19 17:08:37 +0200">
				<details>0.969349 ± 0.0303669 (95% CI)</details>
			</result>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
		<query>
			<formula/>
			<comment>// EXTRA QUERIES</comment>
		</query>
		<query>
			<formula>Pr[&lt;=300]([] policy!=2 or (Station3.counter == 0 and Station4.counter ==0 ) )</formula>
			<comment>EXTRA QUERY
If policy = 2 --&gt; never go through stations 3 or 4

Must be verified only for policy 2

configuration 1: &gt;= 0.95
configuration 2: &gt;= 0.95
configuration 3: &gt;= 0.95</comment>
			<result outcome="success" type="interval" value="≥ 0.950056 (95% CI)" timestamp="2023-07-19 17:08:42 +0200">
				<details>≥ 0.950056 (95% CI)</details>
			</result>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
		<query>
			<formula/>
			<comment>// Just for Simulation</comment>
		</query>
		<query>
			<formula>simulate[&lt;=200] {
Station1.pt, processing_time[0]*speed,
Station2.pt, processing_time[1]*speed, 
Station3.pt, processing_time[2]*speed, 
Station4.pt, processing_time[3]*speed, 
Station5.pt, processing_time[4]*speed, 
Station6.pt, processing_time[5]*speed 
}</formula>
			<comment>Simulations of Processing times</comment>
		</query>
		<query>
			<formula>simulate[&lt;=200] {
Station1.n_Pieces(), 
Station2.n_Pieces(),
Station3.n_Pieces(),
Station5.n_Pieces(),
Station5.n_Pieces(),
Station6.n_Pieces()
}</formula>
			<comment>Simulation of the total pieces in a Processing station</comment>
		</query>
		<query>
			<formula>simulate[&lt;=500] {
isQueueFull(QueueSensor1.b_id, QueueSensor1.pos), !belt[QueueSensor1.b_id][QueueSensor1.pos - 1], isQuery_True(QueueSensor1.b_id, QueueSensor1.pos),
isQueueFull(QueueSensor2.b_id, QueueSensor2.pos), !belt[QueueSensor2.b_id][QueueSensor2.pos - 1], isQuery_True(QueueSensor2.b_id, QueueSensor2.pos),
isQueueFull(QueueSensor3.b_id, QueueSensor3.pos), !belt[QueueSensor3.b_id][QueueSensor3.pos - 1], isQuery_True(QueueSensor3.b_id, QueueSensor3.pos),
isQueueFull(QueueSensor4.b_id, QueueSensor4.pos), !belt[QueueSensor4.b_id][QueueSensor4.pos - 1], isQuery_True(QueueSensor4.b_id, QueueSensor4.pos),
isQueueFull(QueueSensor5.b_id, QueueSensor5.pos), !belt[QueueSensor5.b_id][QueueSensor5.pos - 1], isQuery_True(QueueSensor5.b_id, QueueSensor5.pos),
isQueueFull(QueueSensor6.b_id, QueueSensor6.pos), !belt[QueueSensor6.b_id][QueueSensor6.pos - 1], isQuery_True(QueueSensor6.b_id, QueueSensor6.pos)
}</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate[&lt;=500]{nPieces()}</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate[&lt;=20]{StationSensor1.valore, belt[StationSensor1.b_id][length[StationSensor1.b_id] - 1]}</formula>
			<comment/>
		</query>
		<query>
			<formula>simulate[&lt;=1000]{
isQuery_True(QueueSensor1.b_id, QueueSensor1.pos),
isQuery_True(QueueSensor2.b_id, QueueSensor2.pos),
isQuery_True(QueueSensor3.b_id, QueueSensor3.pos),
isQuery_True(QueueSensor4.b_id, QueueSensor4.pos),
isQuery_True(QueueSensor5.b_id, QueueSensor5.pos),
isQuery_True(QueueSensor6.b_id, QueueSensor6.pos) }</formula>
			<comment/>
		</query>
	</queries>
</nta>
