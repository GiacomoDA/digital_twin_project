<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.6//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_6.dtd'>
<nta>
	<declaration>/// ********** CONSTANTS

// number of conveyor belt segments
const int NS = 7;
// max length of a conveyor belt segment
const int L = 25;
// number of processing stations
const int NP = 6;


/// ********** CUSTOM TYPES

// id type
typedef int[0, NS + NP - 1] id;
typedef int[0, 3] conf;

/// ********** SYSTEM SETTINGS
const conf configuration=1;
//0: default configuration
//1: TODO
//2: TODO
//3: TODO

//###########CONFIG 0##############
// conveyor belt speed [slots/s]
const int speed = 2;

// processing stations processing time
const int processing_time[NP] = {7,8,6,5,7,8};

// processing stations location on belts
const int P_pos[NP] = {4, 4, 3, 4, 4, 3};

// number of pieces
const int NPC = 13;    // previously 6

//branch switching-policy
// 1: alternate equally between the 2 branches (waiting for a piece to be available)
// 2: TODO
const int policy = 1;

//queue sensors
const int qs_pos[NP] = {2, 10, 4, 1, 3, 3}; //choose queue sensor position on belt
const bool qs_active[NP] = {true, true, true, true, true, true}; //choose if queue sensor is active

//###########CONFIG 1##############
/*
// conveyor belt speed [slots/s]
const int speed = 2;

// processing stations processing time
const int processing_time[NP] = {7,8,6,5,7,8};

// processing stations location on belts
const int P_pos[NP] = {4, 4, 3, 4, 4, 3};

// number of pieces
const int NPC = 13;    // previously 6

//branch switching-policy
// 1: alternate equally between the 2 branches (waiting for a piece to be available)
// 2: TODO
const int policy = 1;

//queue sensors
const int qs_pos[NP] = {2, 10, 4, 1, 3, 3}; //choose queue sensor position on belt
const bool qs_active[NP] = {true, true, true, true, true, true}; //choose if queue sensor is active
*/

/// ********** EXTRA SETTINGS

// id of following component
//id next[NS + NP] = {7, 8, 4, 10, 11, 6, 12, 1, 2, 3, 6, 5, 0};
id next[NS + NP] = {7, 8, 9, 10, 11, 6, 12, 1, 2, 3, 6, 5, 0};

// length of each conveyor belt segment
const int length[NS + NP] = {13, 16, 25, 4, 13, 2, 5, 5, 5, 4, 9, 6, 4};



/// ********** CHANNELS

// channel to synchronize belts movement
broadcast chan synch1, synch2, synch3, synch4,sync_initialize;
// 
broadcast chan pieceAvailable[NP];


/// ********** OTHER DATA STRUCTURES

// stations busy processing
bool busy[NP];
// stations ready to accept a new piece
bool ready[NP];
// stations that can release a piece
bool canRelease[NP];
// conveyor belt segments matrix
bool belt[NS + NP][L];
// id of component preceding a belt segment
id prev_id[NS];
// true if the previous component is unique
bool unique_prev[NS];
// belt semaphore
bool blocked[NS];


/// ********** FUNCTIONS

// remove last piece from belt segment
void removeLast(id b_id) {
    belt[b_id][length[b_id] - 1] = false;
}
// set the busy state of a processing station
void setBusy(id s_id, bool s) {
    busy[s_id - NS] = s;
}
// set the done state of a processing station
void setDone(id s_id, bool s) {
    //done[s_id - NS] = s;
}
// count and return number of pieces on the belt
int nPieces() {
    int i, j, count = 0;
    for (i = 0; i &lt; NS + NP; i++) {
        for (j = 0; j &lt; L; j++) {
            if (belt[i][j]) {
                count++;
            }
        }
    }
    return count;
}

bool isQueueFull(id b_id, int pos) {
    int i;
    for  (i = length[b_id] - 1; i &gt;= pos; i--) {
        if (!belt[b_id][i]) {
            return false;
        }
    }
    return true;
}


void initialize_config(){
if (configuration==1){
// conveyor belt speed [slots/s]
int speed = 2;

// processing stations processing time
int processing_time[NP] = {7,8,6,5,7,8};

// processing stations location on belts
int P_pos[NP] = {4, 4, 3, 4, 4, 3};

// number of pieces
int NPC = 10;    // previously 6

//branch switching-policy
// 1: alternate equally between the 2 branches (waiting for a piece to be available)
// 2: TODO
int policy = 1;

//queue sensors
int qs_pos[NP] = {2, 10, 4, 1, 3, 3}; //choose queue sensor position on belt
bool qs_active[NP] = {true, false, true, true, true, true}; //choose if queue sensor is active
}
//------------------------------------------------
if (configuration==2){
// conveyor belt speed [slots/s]
 int speed = 2;

// processing stations processing time
 int processing_time[NP] = {7,8,6,5,7,8};

// processing stations location on belts
 int P_pos[NP] = {4, 4, 3, 4, 4, 3};

// number of pieces
 int NPC = 13;    // previously 6

//branch switching-policy
// 1: alternate equally between the 2 branches (waiting for a piece to be available)
// 2: TODO
 int policy = 1;

//queue sensors
 int qs_pos[NP] = {2, 10, 4, 1, 3, 3}; //choose queue sensor position on belt
 bool qs_active[NP] = {true, true, true, true, true, true}; //choose if queue sensor is active
}
//------------------------------------------------
if (configuration==3){
// conveyor belt speed [slots/s]
 int speed = 2;

// processing stations processing time
 int processing_time[NP] = {7,8,6,5,7,8};

// processing stations location on belts
 int P_pos[NP] = {4, 4, 3, 4, 4, 3};

// number of pieces
 int NPC = 13;    // previously 6

//branch switching-policy
// 1: alternate equally between the 2 branches (waiting for a piece to be available)
// 2: TODO
 int policy = 1;

//queue sensors
 int qs_pos[NP] = {2, 10, 4, 1, 3, 3}; //choose queue sensor position on belt
 bool qs_active[NP] = {true, true, true, true, true, true}; //choose if queue sensor is active

}}


/// ********** PISTONE VERDE

// if true, send to station 9
bool semaphore = true;
// if wait = true, then the belt precedeed by another belt has to wait (to avoid belts skipping a step)
bool wait = true;
// if stop_process is false, then the system can process a piece (always false except for station 9 (3), where verifier[9] = !semaphore
bool stop_process[NS + NP];</declaration>
	<template>
		<name>Synchronizer</name>
		<declaration>clock c;

void initialize() {
    int i, j, count = 0;
    id temp; 
    //initialize_config();
    /*belt[5][length[5] - 1] =  true;
    belt[5][length[5] - 2] =  true;
    belt[10][length[10] - 1] = true;*/
    
    // place starting pieces on the first belt segment
    for (i = 0; i &lt; NPC; i++) {
        belt[0][i] = true;
    }
    
    // set canRelease vector to all true
    for (i = 0; i &lt; NP; i++) {
        canRelease[i] = true;
    }

    // update prev_id and unique_prev vectors
    for (i = 0; i &lt; NS; i++) {
        count = 0;
	    for (j = 0; j &lt; NS + NP; j++) {
		    if (next[j] == i) {
			    count++;
			    temp = j;
		    }
	    }
	    if (count &lt;= 1) {
		    unique_prev[i] = true;
	    }
	    prev_id[i] = temp;
    }
}</declaration>
		<location id="id0" x="42" y="8">
			<committed/>
		</location>
		<location id="id1" x="42" y="-153">
			<committed/>
		</location>
		<location id="id2" x="-119" y="-153">
			<committed/>
		</location>
		<location id="id3" x="-119" y="8">
			<label kind="invariant" x="-144" y="25">c &lt;= 1</label>
		</location>
		<location id="id4" x="-348" y="8">
			<name x="-373" y="25">Start</name>
			<committed/>
		</location>
		<init ref="id4"/>
		<transition id="id5">
			<source ref="id0"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-68" y="-17">synch4!</label>
		</transition>
		<transition id="id6">
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="51" y="-85">synch3!</label>
		</transition>
		<transition id="id7">
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-68" y="-178">synch2!</label>
		</transition>
		<transition id="id8">
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-178" y="-102">c == 1</label>
			<label kind="synchronisation" x="-187" y="-85">synch1!</label>
			<label kind="assignment" x="-170" y="-68">c = 0</label>
		</transition>
		<transition id="id9">
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-314" y="17">sync_initialize!</label>
			<label kind="assignment" x="-306" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">ConveyorBelt</name>
		<declaration>void move() {
    int i, j, index;
    bool flag = true;

    for (i = 0; i &lt; NS; i++) {
        // move piece on station's belt
        if (next[i] &gt;= NS &amp;&amp; ready[next[i] - NS] &amp;&amp; belt[i][length[i] - 1]) {
            belt[i][length[i] - 1] = false;
            belt[next[i]][0] = true;
            busy[next[i] - NS] = true;
        }
    }

    // for each belt segment
    for (i = 0; i &lt; NS; i++) {  
        // move pieces forward by 1 slot
        for (j = length[i] - 1; j &gt; 0; j--) {
            if (!belt[i][j]) {
                belt[i][j] = belt[i][j - 1];
                belt[i][j - 1] = false;
            }
        }
        
        // if the segment is at a confluence point
        if (!unique_prev[i]) {
            // scan the next[] array to look for the next previous component with a piece available
	        for (j = prev_id[i] + 1; j &lt; NS + NP + prev_id[i]; j++) {
		        if (flag &amp;&amp; next[j % (NS + NP)] == i &amp;&amp; belt[j % (NS + NP)][length[j % (NS + NP)] - 1]) {
			        prev_id[i] = j % (NS + NP);
			        flag = false;
		        }
	        }
        // if not, there could be a branch and next[] might have changed
        } else {
            for (j = 0; j &lt; NS + NP; j++) {
                if (next[j] == i) {
                    prev_id[i] = j;
                }
            }
        }

        // if legal, take one piece from the previous component and
        // add it at the start of the belt
        if (prev_id[i] &gt;= NS &amp;&amp; !belt[i][0] &amp;&amp; belt[prev_id[i]][length[prev_id[i]] - 1]) {
            belt[i][0] = true;
            removeLast(prev_id[i]);
        } else if (prev_id[i] &lt; NS &amp;&amp; !belt[i][0] &amp;&amp; belt[prev_id[i]][length[prev_id[i]] - 1]) {
            if (i &lt; NS &amp;&amp; wait &amp;&amp; i &gt; prev_id[i]) {
                wait = !wait;
            } else {
                if (i &lt; NS &amp;&amp; !wait &amp;&amp; i &gt; prev_id[i]) {
                    wait = !wait;
                }
                belt[i][0] = true;
                removeLast(prev_id[i]);
            }
        }
    }
}</declaration>
		<location id="id10" x="-1266" y="-1232">
			<name x="-1292" y="-1215">Moving</name>
		</location>
		<init ref="id10"/>
		<transition id="id11">
			<source ref="id10"/>
			<target ref="id10"/>
			<label kind="synchronisation" x="-1292" y="-1376">synch2?</label>
			<label kind="assignment" x="-1292" y="-1359">move()</label>
			<nail x="-1300" y="-1334"/>
			<nail x="-1232" y="-1334"/>
		</transition>
	</template>
	<template>
		<name>ProcessingStation</name>
		<parameter>id s_id, int pt, int pos</parameter>
		<declaration>int counter;

void move() {
    int i;

    // move pieces forward by 1 slot
    for (i = length[s_id] - 1; i &gt; 0; i--) {
        if (!belt[s_id][i]) {
            belt[s_id][i] = belt[s_id][i - 1];
            belt[s_id][i - 1] = false;
        }
    }
}

//if the processing station is on the last slot of it's conveyor belt or further away(physically impossible) it will be moved to the second-last spot 
void fixStationPos() {
        int thisStationLenght;
        int j;
          for ( j = 0; j &lt;NS+NP; j++) {
            //cycle untile next[j] is the station's belt
            if (next[j]==s_id) {
                thisStationLenght = length[next[j]];
                //check if the station is in the last belt slot or further
                if (pos &gt;= thisStationLenght) {
                    //move staition in second-last spot
                    pos=thisStationLenght-1;
                }
            }
        }
    
}

int nPieces() {
    int i, c = 0;
    for (i = 0; i &lt; length[s_id]; i++) {
        if (belt[s_id][i]) {
            c++;
        }
    }
    return c;
}</declaration>
		<location id="id12" x="-2304" y="-2830">
		</location>
		<location id="id13" x="-2304" y="-2533">
		</location>
		<location id="id14" x="-1921" y="-2533">
		</location>
		<location id="id15" x="-1921" y="-2958">
			<name x="-1947" y="-3001">Ready</name>
			<label kind="exponentialrate" x="-1912" y="-2941">100</label>
		</location>
		<location id="id16" x="-2304" y="-2958">
			<name x="-2329" y="-3000">Empty</name>
		</location>
		<location id="id17" x="-2304" y="-2695">
		</location>
		<location id="id18" x="-2465" y="-3043">
			<name x="-2475" y="-3077">start</name>
		</location>
		<init ref="id18"/>
		<transition id="id19">
			<source ref="id18"/>
			<target ref="id16"/>
			<label kind="synchronisation" x="-2414" y="-3060">sync_initialize?</label>
			<label kind="assignment" x="-2414" y="-3043">fixStationPos()</label>
		</transition>
		<transition id="id20">
			<source ref="id12"/>
			<target ref="id16"/>
			<label kind="guard" x="-2490" y="-2932">!belt[s_id][length[s_id] - 1]</label>
			<label kind="synchronisation" x="-2372" y="-2915">synch3?</label>
			<label kind="assignment" x="-2465" y="-2898">busy[s_id - NS] = false</label>
		</transition>
		<transition id="id21">
			<source ref="id17"/>
			<target ref="id12"/>
			<label kind="guard" x="-2481" y="-2779">belt[s_id][length[s_id] - 1]</label>
			<label kind="synchronisation" x="-2371" y="-2762">synch2?</label>
		</transition>
		<transition id="id22">
			<source ref="id17"/>
			<target ref="id17"/>
			<label kind="guard" x="-2558" y="-2728">!belt[s_id][length[s_id] - 1]</label>
			<label kind="synchronisation" x="-2449" y="-2711">synch2?</label>
			<label kind="assignment" x="-2440" y="-2694">move()</label>
			<nail x="-2380" y="-2720"/>
			<nail x="-2380" y="-2669"/>
		</transition>
		<transition id="id23">
			<source ref="id13"/>
			<target ref="id17"/>
			<label kind="guard" x="-2575" y="-2635">counter == pt &amp;&amp; canRelease[s_id - NS]</label>
			<label kind="synchronisation" x="-2372" y="-2618">synch1?</label>
		</transition>
		<transition id="id24">
			<source ref="id13"/>
			<target ref="id13"/>
			<label kind="guard" x="-2473" y="-2558">counter &lt; pt</label>
			<label kind="synchronisation" x="-2448" y="-2542">synch1?</label>
			<label kind="assignment" x="-2465" y="-2525">counter++</label>
			<nail x="-2380" y="-2559"/>
			<nail x="-2380" y="-2508"/>
		</transition>
		<transition id="id25">
			<source ref="id14"/>
			<target ref="id13"/>
			<label kind="guard" x="-2202" y="-2525">belt[s_id][pos - 1]</label>
			<label kind="synchronisation" x="-2151" y="-2508">synch1?</label>
			<label kind="assignment" x="-2168" y="-2491">counter = 1</label>
		</transition>
		<transition id="id26">
			<source ref="id14"/>
			<target ref="id14"/>
			<label kind="synchronisation" x="-1845" y="-2550">synch2?</label>
			<label kind="assignment" x="-1845" y="-2533">move()</label>
			<nail x="-1854" y="-2508"/>
			<nail x="-1854" y="-2550"/>
		</transition>
		<transition id="id27">
			<source ref="id15"/>
			<target ref="id14"/>
			<label kind="guard" x="-1913" y="-2720">busy[s_id - NS]</label>
			<label kind="synchronisation" x="-1913" y="-2703">synch3?</label>
			<label kind="assignment" x="-1913" y="-2686">ready[s_id - NS] = false</label>
		</transition>
		<transition id="id28">
			<source ref="id16"/>
			<target ref="id15"/>
			<label kind="guard" x="-2201" y="-3016">!stop_process[s_id-1]</label>
			<label kind="synchronisation" x="-2210" y="-3000">pieceAvailable[s_id - NS]?</label>
			<label kind="assignment" x="-2202" y="-2983">ready[s_id - NS] = true</label>
		</transition>
	</template>
	<template>
		<name>StationSensor</name>
		<parameter>id s_id, id b_id</parameter>
		<location id="id29" x="-3289" y="-3417">
			<committed/>
		</location>
		<location id="id30" x="-3578" y="-3417">
		</location>
		<init ref="id30"/>
		<transition id="id31">
			<source ref="id29"/>
			<target ref="id30"/>
			<label kind="synchronisation" x="-3544" y="-3357">pieceAvailable[s_id - NS]!</label>
			<nail x="-3340" y="-3366"/>
			<nail x="-3535" y="-3367"/>
		</transition>
		<transition id="id32">
			<source ref="id30"/>
			<target ref="id29"/>
			<label kind="guard" x="-3578" y="-3536">belt[b_id][length[b_id] - 1]
&amp;&amp; next[b_id] &gt;= NS &amp;&amp; !busy[next[b_id] - NS]</label>
			<label kind="synchronisation" x="-3468" y="-3493">synch1?</label>
			<nail x="-3535" y="-3468"/>
			<nail x="-3340" y="-3468"/>
		</transition>
	</template>
	<template>
		<name>QueueSensor</name>
		<parameter>id s_id, id b_id, int pos, bool active</parameter>
		<location id="id33" x="-790" y="-8">
		</location>
		<init ref="id33"/>
		<transition id="id34">
			<source ref="id33"/>
			<target ref="id33"/>
			<label kind="guard" x="-841" y="85">active==true &amp;&amp; pos&gt;=0 &amp;&amp; !belt[b_id][pos]</label>
			<label kind="synchronisation" x="-816" y="102">synch1?</label>
			<label kind="assignment" x="-892" y="119">canRelease[s_id - NS] = true</label>
			<nail x="-824" y="76"/>
			<nail x="-756" y="76"/>
		</transition>
		<transition id="id35">
			<source ref="id33"/>
			<target ref="id33"/>
			<label kind="guard" x="-841" y="-153">active==true &amp;&amp; belt[b_id][pos]</label>
			<label kind="synchronisation" x="-815" y="-136">synch1?</label>
			<label kind="assignment" x="-909" y="-119">canRelease[s_id - NS] = false</label>
			<nail x="-824" y="-93"/>
			<nail x="-756" y="-93"/>
		</transition>
	</template>
	<template>
		<name>control_station</name>
		<parameter>int policy, id s_id, id b_id</parameter>
		<declaration>void control() {
    if (policy == 1) {
        if (semaphore) {
            next[2] = 4;
        } else {
            next[2] = 9;
        }
    }
    semaphore = !semaphore;
    stop_process[s_id-1] = !semaphore;
    /*if (policy == 2) {
        if (verifier[s_id-1]) {
            verifier[s_id-1] = !verifier[s_id-1];
            next[2] = 4;
        } else {
            verifier[s_id-1] = !verifier[s_id-1];
            next[2] = 9;
        }
    }*/

}</declaration>
		<location id="id36" x="-297" y="-42">
		</location>
		<init ref="id36"/>
		<transition id="id37">
			<source ref="id36"/>
			<target ref="id36"/>
			<label kind="guard" x="-408" y="-195">belt[b_id][length[b_id]-1]</label>
			<label kind="synchronisation" x="-323" y="-178">synch1?</label>
			<label kind="assignment" x="-331" y="-161">control()</label>
			<nail x="-331" y="-136"/>
			<nail x="-263" y="-136"/>
		</transition>
	</template>
	<system>// Place template instantiations here.
Synch = Synchronizer();
Belt = ConveyorBelt();
Station1 = ProcessingStation(7, processing_time[0], P_pos[0]);
Station2 = ProcessingStation(8, processing_time[1],P_pos[1]); // works also with 100 and all the other processing times set to 1, to check if the queue sensor works properly
Station3 = ProcessingStation(9, processing_time[2], P_pos[2]); // works also with 30 (this cause the controller to change policy because the station is occupied for long time)
Station4 = ProcessingStation(10, processing_time[3],P_pos[3]);
Station5 = ProcessingStation(11,processing_time[4],P_pos[4]);
Station6 = ProcessingStation(12, processing_time[5], P_pos[5]);

StationSensor1 = StationSensor(7, 0);
StationSensor2 = StationSensor(8, 1);
StationSensor3 = StationSensor(9, 2);
StationSensor4 = StationSensor(10, 3);
StationSensor5 = StationSensor(11, 4);
StationSensor6 = StationSensor(12, 6);

//id s_id, id b_id, int pos
QueueSensor1 = QueueSensor(12, 0, qs_pos[0], qs_active[0]);
QueueSensor2 = QueueSensor(7, 1, qs_pos[1], qs_active[1]);        // previously 5 instead of 10
QueueSensor3 = QueueSensor(8, 4, qs_pos[2], qs_active[2]);
QueueSensor4 = QueueSensor(9, 3, qs_pos[3], qs_active[3]);
QueueSensor5 = QueueSensor(10, 6,qs_pos[4], qs_active[4]);
QueueSensor6 = QueueSensor(11, 6, qs_pos[5], qs_active[5]);

//test = FlowController(1);
controller = control_station(1, 9, 2);
// List one or more processes to be composed into a system.
system Synch, Belt,
        Station1, Station2, Station3, Station4, Station5, Station6,
        StationSensor1, StationSensor2, StationSensor3, StationSensor4, StationSensor5, StationSensor6,
        controller,
        QueueSensor1, QueueSensor2, QueueSensor3, QueueSensor4, QueueSensor5, QueueSensor6;</system>
	<queries>
		<query>
			<formula>A[] not deadlock</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2023-07-15 14:44:32 +0200">
			</result>
		</query>
		<query>
			<formula>simulate[&lt;=1000]{Synch.c}</formula>
			<comment>simulate for 1000 time units, and plots the clock Synch.c. To plot other values (only clocks or integers) they can be added into {}.</comment>
			<result outcome="success" type="quality" timestamp="2023-07-15 13:02:34 +0200">
				<plot title="Simulations (1)" xaxis="time" yaxis="value">
					<series title="Synch.c" type="l" color="0xff0000" encoding="csv">0.0,0.0
1.0,1.0
1.0,0.0
2.0,1.0
2.0,0.0
3.0,1.0
3.0,0.0
4.0,1.0
4.0,0.0
5.0,1.0
5.0,0.0
6.0,1.0
6.0,0.0
7.0,1.0
7.0,0.0
8.0,1.0
8.0,0.0
9.0,1.0
9.0,0.0
10.0,1.0
10.0,0.0
11.0,1.0
11.0,0.0
12.0,1.0
12.0,0.0
13.0,1.0
13.0,0.0
14.0,1.0
14.0,0.0
15.0,1.0
15.0,0.0
16.0,1.0
16.0,0.0
17.0,1.0
17.0,0.0
18.0,1.0
18.0,0.0
19.0,1.0
19.0,0.0
20.0,1.0
20.0,0.0
21.0,1.0
21.0,0.0
22.0,1.0
22.0,0.0
23.0,1.0
23.0,0.0
24.0,1.0
24.0,0.0
25.0,1.0
25.0,0.0
26.0,1.0
26.0,0.0
27.0,1.0
27.0,0.0
28.0,1.0
28.0,0.0
29.0,1.0
29.0,0.0
30.0,1.0
30.0,0.0
31.0,1.0
31.0,0.0
32.0,1.0
32.0,0.0
33.0,1.0
33.0,0.0
34.0,1.0
34.0,0.0
35.0,1.0
35.0,0.0
36.0,1.0
36.0,0.0
37.0,1.0
37.0,0.0
38.0,1.0
38.0,0.0
39.0,1.0
39.0,0.0
40.0,1.0
40.0,0.0
41.0,1.0
41.0,0.0
42.0,1.0
42.0,0.0
43.0,1.0
43.0,0.0
44.0,1.0
44.0,0.0
45.0,1.0
45.0,0.0
46.0,1.0
46.0,0.0
47.0,1.0
47.0,0.0
48.0,1.0
48.0,0.0
49.0,1.0
49.0,0.0
50.0,1.0
50.0,0.0
51.0,1.0
51.0,0.0
52.0,1.0
52.0,0.0
53.0,1.0
53.0,0.0
54.0,1.0
54.0,0.0
55.0,1.0
55.0,0.0
56.0,1.0
56.0,0.0
57.0,1.0
57.0,0.0
58.0,1.0
58.0,0.0
59.0,1.0
59.0,0.0
60.0,1.0
60.0,0.0
61.0,1.0
61.0,0.0
62.0,1.0
62.0,0.0
63.0,1.0
63.0,0.0
64.0,1.0
64.0,0.0
65.0,1.0
65.0,0.0
66.0,1.0
66.0,0.0
67.0,1.0
67.0,0.0
68.0,1.0
68.0,0.0
69.0,1.0
69.0,0.0
70.0,1.0
70.0,0.0
71.0,1.0
71.0,0.0
72.0,1.0
72.0,0.0
73.0,1.0
73.0,0.0
74.0,1.0
74.0,0.0
75.0,1.0
75.0,0.0
76.0,1.0
76.0,0.0
77.0,1.0
77.0,0.0
78.0,1.0
78.0,0.0
79.0,1.0
79.0,0.0
80.0,1.0
80.0,0.0
81.0,1.0
81.0,0.0
82.0,1.0
82.0,0.0
83.0,1.0
83.0,0.0
84.0,1.0
84.0,0.0
85.0,1.0
85.0,0.0
86.0,1.0
86.0,0.0
87.0,1.0
87.0,0.0
88.0,1.0
88.0,0.0
89.0,1.0
89.0,0.0
90.0,1.0
90.0,0.0
91.0,1.0
91.0,0.0
92.0,1.0
92.0,0.0
93.0,1.0
93.0,0.0
94.0,1.0
94.0,0.0
95.0,1.0
95.0,0.0
96.0,1.0
96.0,0.0
97.0,1.0
97.0,0.0
98.0,1.0
98.0,0.0
99.0,1.0
99.0,0.0
100.0,1.0
100.0,0.0
101.0,1.0
101.0,0.0
102.0,1.0
102.0,0.0
103.0,1.0
103.0,0.0
104.0,1.0
104.0,0.0
105.0,1.0
105.0,0.0
106.0,1.0
106.0,0.0
107.0,1.0
107.0,0.0
108.0,1.0
108.0,0.0
109.0,1.0
109.0,0.0
110.0,1.0
110.0,0.0
111.0,1.0
111.0,0.0
112.0,1.0
112.0,0.0
113.0,1.0
113.0,0.0
114.0,1.0
114.0,0.0
115.0,1.0
115.0,0.0
116.0,1.0
116.0,0.0
117.0,1.0
117.0,0.0
118.0,1.0
118.0,0.0
119.0,1.0
119.0,0.0
120.0,1.0
120.0,0.0
121.0,1.0
121.0,0.0
122.0,1.0
122.0,0.0
123.0,1.0
123.0,0.0
124.0,1.0
124.0,0.0
125.0,1.0
125.0,0.0
126.0,1.0
126.0,0.0
127.0,1.0
127.0,0.0
128.0,1.0
128.0,0.0
129.0,1.0
129.0,0.0
130.0,1.0
130.0,0.0
131.0,1.0
131.0,0.0
132.0,1.0
132.0,0.0
133.0,1.0
133.0,0.0
134.0,1.0
134.0,0.0
135.0,1.0
135.0,0.0
136.0,1.0
136.0,0.0
137.0,1.0
137.0,0.0
138.0,1.0
138.0,0.0
139.0,1.0
139.0,0.0
140.0,1.0
140.0,0.0
141.0,1.0
141.0,0.0
142.0,1.0
142.0,0.0
143.0,1.0
143.0,0.0
144.0,1.0
144.0,0.0
145.0,1.0
145.0,0.0
146.0,1.0
146.0,0.0
147.0,1.0
147.0,0.0
148.0,1.0
148.0,0.0
149.0,1.0
149.0,0.0
150.0,1.0
150.0,0.0
151.0,1.0
151.0,0.0
152.0,1.0
152.0,0.0
153.0,1.0
153.0,0.0
154.0,1.0
154.0,0.0
155.0,1.0
155.0,0.0
156.0,1.0
156.0,0.0
157.0,1.0
157.0,0.0
158.0,1.0
158.0,0.0
159.0,1.0
159.0,0.0
160.0,1.0
160.0,0.0
161.0,1.0
161.0,0.0
162.0,1.0
162.0,0.0
163.0,1.0
163.0,0.0
164.0,1.0
164.0,0.0
165.0,1.0
165.0,0.0
166.0,1.0
166.0,0.0
167.0,1.0
167.0,0.0
168.0,1.0
168.0,0.0
169.0,1.0
169.0,0.0
170.0,1.0
170.0,0.0
171.0,1.0
171.0,0.0
172.0,1.0
172.0,0.0
173.0,1.0
173.0,0.0
174.0,1.0
174.0,0.0
175.0,1.0
175.0,0.0
176.0,1.0
176.0,0.0
177.0,1.0
177.0,0.0
178.0,1.0
178.0,0.0
179.0,1.0
179.0,0.0
180.0,1.0
180.0,0.0
181.0,1.0
181.0,0.0
182.0,1.0
182.0,0.0
183.0,1.0
183.0,0.0
184.0,1.0
184.0,0.0
185.0,1.0
185.0,0.0
186.0,1.0
186.0,0.0
187.0,1.0
187.0,0.0
188.0,1.0
188.0,0.0
189.0,1.0
189.0,0.0
190.0,1.0
190.0,0.0
191.0,1.0
191.0,0.0
192.0,1.0
192.0,0.0
193.0,1.0
193.0,0.0
194.0,1.0
194.0,0.0
195.0,1.0
195.0,0.0
196.0,1.0
196.0,0.0
197.0,1.0
197.0,0.0
198.0,1.0
198.0,0.0
199.0,1.0
199.0,0.0
200.0,1.0
200.0,0.0
201.0,1.0
201.0,0.0
202.0,1.0
202.0,0.0
203.0,1.0
203.0,0.0
204.0,1.0
204.0,0.0
205.0,1.0
205.0,0.0
206.0,1.0
206.0,0.0
207.0,1.0
207.0,0.0
208.0,1.0
208.0,0.0
209.0,1.0
209.0,0.0
210.0,1.0
210.0,0.0
211.0,1.0
211.0,0.0
212.0,1.0
212.0,0.0
213.0,1.0
213.0,0.0
214.0,1.0
214.0,0.0
215.0,1.0
215.0,0.0
216.0,1.0
216.0,0.0
217.0,1.0
217.0,0.0
218.0,1.0
218.0,0.0
219.0,1.0
219.0,0.0
220.0,1.0
220.0,0.0
221.0,1.0
221.0,0.0
222.0,1.0
222.0,0.0
223.0,1.0
223.0,0.0
224.0,1.0
224.0,0.0
225.0,1.0
225.0,0.0
226.0,1.0
226.0,0.0
227.0,1.0
227.0,0.0
228.0,1.0
228.0,0.0
229.0,1.0
229.0,0.0
230.0,1.0
230.0,0.0
231.0,1.0
231.0,0.0
232.0,1.0
232.0,0.0
233.0,1.0
233.0,0.0
234.0,1.0
234.0,0.0
235.0,1.0
235.0,0.0
236.0,1.0
236.0,0.0
237.0,1.0
237.0,0.0
238.0,1.0
238.0,0.0
239.0,1.0
239.0,0.0
240.0,1.0
240.0,0.0
241.0,1.0
241.0,0.0
242.0,1.0
242.0,0.0
243.0,1.0
243.0,0.0
244.0,1.0
244.0,0.0
245.0,1.0
245.0,0.0
246.0,1.0
246.0,0.0
247.0,1.0
247.0,0.0
248.0,1.0
248.0,0.0
249.0,1.0
249.0,0.0
250.0,1.0
250.0,0.0
251.0,1.0
251.0,0.0
252.0,1.0
252.0,0.0
253.0,1.0
253.0,0.0
254.0,1.0
254.0,0.0
255.0,1.0
255.0,0.0
256.0,1.0
256.0,0.0
257.0,1.0
257.0,0.0
258.0,1.0
258.0,0.0
259.0,1.0
259.0,0.0
260.0,1.0
260.0,0.0
261.0,1.0
261.0,0.0
262.0,1.0
262.0,0.0
263.0,1.0
263.0,0.0
264.0,1.0
264.0,0.0
265.0,1.0
265.0,0.0
266.0,1.0
266.0,0.0
267.0,1.0
267.0,0.0
268.0,1.0
268.0,0.0
269.0,1.0
269.0,0.0
270.0,1.0
270.0,0.0
271.0,1.0
271.0,0.0
272.0,1.0
272.0,0.0
273.0,1.0
273.0,0.0
274.0,1.0
274.0,0.0
275.0,1.0
275.0,0.0
276.0,1.0
276.0,0.0
277.0,1.0
277.0,0.0
278.0,1.0
278.0,0.0
279.0,1.0
279.0,0.0
280.0,1.0
280.0,0.0
281.0,1.0
281.0,0.0
282.0,1.0
282.0,0.0
283.0,1.0
283.0,0.0
284.0,1.0
284.0,0.0
285.0,1.0
285.0,0.0
286.0,1.0
286.0,0.0
287.0,1.0
287.0,0.0
288.0,1.0
288.0,0.0
289.0,1.0
289.0,0.0
290.0,1.0
290.0,0.0
291.0,1.0
291.0,0.0
292.0,1.0
292.0,0.0
293.0,1.0
293.0,0.0
294.0,1.0
294.0,0.0
295.0,1.0
295.0,0.0
296.0,1.0
296.0,0.0
297.0,1.0
297.0,0.0
298.0,1.0
298.0,0.0
299.0,1.0
299.0,0.0
300.0,1.0
300.0,0.0
301.0,1.0
301.0,0.0
302.0,1.0
302.0,0.0
303.0,1.0
303.0,0.0
304.0,1.0
304.0,0.0
305.0,1.0
305.0,0.0
306.0,1.0
306.0,0.0
307.0,1.0
307.0,0.0
308.0,1.0
308.0,0.0
309.0,1.0
309.0,0.0
310.0,1.0
310.0,0.0
311.0,1.0
311.0,0.0
312.0,1.0
312.0,0.0
313.0,1.0
313.0,0.0
314.0,1.0
314.0,0.0
315.0,1.0
315.0,0.0
316.0,1.0
316.0,0.0
317.0,1.0
317.0,0.0
318.0,1.0
318.0,0.0
319.0,1.0
319.0,0.0
320.0,1.0
320.0,0.0
321.0,1.0
321.0,0.0
322.0,1.0
322.0,0.0
323.0,1.0
323.0,0.0
324.0,1.0
324.0,0.0
325.0,1.0
325.0,0.0
326.0,1.0
326.0,0.0
327.0,1.0
327.0,0.0
328.0,1.0
328.0,0.0
329.0,1.0
329.0,0.0
330.0,1.0
330.0,0.0
331.0,1.0
331.0,0.0
332.0,1.0
332.0,0.0
333.0,1.0
333.0,0.0
334.0,1.0
334.0,0.0
335.0,1.0
335.0,0.0
336.0,1.0
336.0,0.0
337.0,1.0
337.0,0.0
338.0,1.0
338.0,0.0
339.0,1.0
339.0,0.0
340.0,1.0
340.0,0.0
341.0,1.0
341.0,0.0
342.0,1.0
342.0,0.0
343.0,1.0
343.0,0.0
344.0,1.0
344.0,0.0
345.0,1.0
345.0,0.0
346.0,1.0
346.0,0.0
347.0,1.0
347.0,0.0
348.0,1.0
348.0,0.0
349.0,1.0
349.0,0.0
350.0,1.0
350.0,0.0
351.0,1.0
351.0,0.0
352.0,1.0
352.0,0.0
353.0,1.0
353.0,0.0
354.0,1.0
354.0,0.0
355.0,1.0
355.0,0.0
356.0,1.0
356.0,0.0
357.0,1.0
357.0,0.0
358.0,1.0
358.0,0.0
359.0,1.0
359.0,0.0
360.0,1.0
360.0,0.0
361.0,1.0
361.0,0.0
362.0,1.0
362.0,0.0
363.0,1.0
363.0,0.0
364.0,1.0
364.0,0.0
365.0,1.0
365.0,0.0
366.0,1.0
366.0,0.0
367.0,1.0
367.0,0.0
368.0,1.0
368.0,0.0
369.0,1.0
369.0,0.0
370.0,1.0
370.0,0.0
371.0,1.0
371.0,0.0
372.0,1.0
372.0,0.0
373.0,1.0
373.0,0.0
374.0,1.0
374.0,0.0
375.0,1.0
375.0,0.0
376.0,1.0
376.0,0.0
377.0,1.0
377.0,0.0
378.0,1.0
378.0,0.0
379.0,1.0
379.0,0.0
380.0,1.0
380.0,0.0
381.0,1.0
381.0,0.0
382.0,1.0
382.0,0.0
383.0,1.0
383.0,0.0
384.0,1.0
384.0,0.0
385.0,1.0
385.0,0.0
386.0,1.0
386.0,0.0
387.0,1.0
387.0,0.0
388.0,1.0
388.0,0.0
389.0,1.0
389.0,0.0
390.0,1.0
390.0,0.0
391.0,1.0
391.0,0.0
392.0,1.0
392.0,0.0
393.0,1.0
393.0,0.0
394.0,1.0
394.0,0.0
395.0,1.0
395.0,0.0
396.0,1.0
396.0,0.0
397.0,1.0
397.0,0.0
398.0,1.0
398.0,0.0
399.0,1.0
399.0,0.0
400.0,1.0
400.0,0.0
401.0,1.0
401.0,0.0
402.0,1.0
402.0,0.0
403.0,1.0
403.0,0.0
404.0,1.0
404.0,0.0
405.0,1.0
405.0,0.0
406.0,1.0
406.0,0.0
407.0,1.0
407.0,0.0
408.0,1.0
408.0,0.0
409.0,1.0
409.0,0.0
410.0,1.0
410.0,0.0
411.0,1.0
411.0,0.0
412.0,1.0
412.0,0.0
413.0,1.0
413.0,0.0
414.0,1.0
414.0,0.0
415.0,1.0
415.0,0.0
416.0,1.0
416.0,0.0
417.0,1.0
417.0,0.0
418.0,1.0
418.0,0.0
419.0,1.0
419.0,0.0
420.0,1.0
420.0,0.0
421.0,1.0
421.0,0.0
422.0,1.0
422.0,0.0
423.0,1.0
423.0,0.0
424.0,1.0
424.0,0.0
425.0,1.0
425.0,0.0
426.0,1.0
426.0,0.0
427.0,1.0
427.0,0.0
428.0,1.0
428.0,0.0
429.0,1.0
429.0,0.0
430.0,1.0
430.0,0.0
431.0,1.0
431.0,0.0
432.0,1.0
432.0,0.0
433.0,1.0
433.0,0.0
434.0,1.0
434.0,0.0
435.0,1.0
435.0,0.0
436.0,1.0
436.0,0.0
437.0,1.0
437.0,0.0
438.0,1.0
438.0,0.0
439.0,1.0
439.0,0.0
440.0,1.0
440.0,0.0
441.0,1.0
441.0,0.0
442.0,1.0
442.0,0.0
443.0,1.0
443.0,0.0
444.0,1.0
444.0,0.0
445.0,1.0
445.0,0.0
446.0,1.0
446.0,0.0
447.0,1.0
447.0,0.0
448.0,1.0
448.0,0.0
449.0,1.0
449.0,0.0
450.0,1.0
450.0,0.0
451.0,1.0
451.0,0.0
452.0,1.0
452.0,0.0
453.0,1.0
453.0,0.0
454.0,1.0
454.0,0.0
455.0,1.0
455.0,0.0
456.0,1.0
456.0,0.0
457.0,1.0
457.0,0.0
458.0,1.0
458.0,0.0
459.0,1.0
459.0,0.0
460.0,1.0
460.0,0.0
461.0,1.0
461.0,0.0
462.0,1.0
462.0,0.0
463.0,1.0
463.0,0.0
464.0,1.0
464.0,0.0
465.0,1.0
465.0,0.0
466.0,1.0
466.0,0.0
467.0,1.0
467.0,0.0
468.0,1.0
468.0,0.0
469.0,1.0
469.0,0.0
470.0,1.0
470.0,0.0
471.0,1.0
471.0,0.0
472.0,1.0
472.0,0.0
473.0,1.0
473.0,0.0
474.0,1.0
474.0,0.0
475.0,1.0
475.0,0.0
476.0,1.0
476.0,0.0
477.0,1.0
477.0,0.0
478.0,1.0
478.0,0.0
479.0,1.0
479.0,0.0
480.0,1.0
480.0,0.0
481.0,1.0
481.0,0.0
482.0,1.0
482.0,0.0
483.0,1.0
483.0,0.0
484.0,1.0
484.0,0.0
485.0,1.0
485.0,0.0
486.0,1.0
486.0,0.0
487.0,1.0
487.0,0.0
488.0,1.0
488.0,0.0
489.0,1.0
489.0,0.0
490.0,1.0
490.0,0.0
491.0,1.0
491.0,0.0
492.0,1.0
492.0,0.0
493.0,1.0
493.0,0.0
494.0,1.0
494.0,0.0
495.0,1.0
495.0,0.0
496.0,1.0
496.0,0.0
497.0,1.0
497.0,0.0
498.0,1.0
498.0,0.0
499.0,1.0
499.0,0.0
500.0,1.0
500.0,0.0
501.0,1.0
501.0,0.0
502.0,1.0
502.0,0.0
503.0,1.0
503.0,0.0
504.0,1.0
504.0,0.0
505.0,1.0
505.0,0.0
506.0,1.0
506.0,0.0
507.0,1.0
507.0,0.0
508.0,1.0
508.0,0.0
509.0,1.0
509.0,0.0
510.0,1.0
510.0,0.0
511.0,1.0
511.0,0.0
512.0,1.0
512.0,0.0
513.0,1.0
513.0,0.0
514.0,1.0
514.0,0.0
515.0,1.0
515.0,0.0
516.0,1.0
516.0,0.0
517.0,1.0
517.0,0.0
518.0,1.0
518.0,0.0
519.0,1.0
519.0,0.0
520.0,1.0
520.0,0.0
521.0,1.0
521.0,0.0
522.0,1.0
522.0,0.0
523.0,1.0
523.0,0.0
524.0,1.0
524.0,0.0
525.0,1.0
525.0,0.0
526.0,1.0
526.0,0.0
527.0,1.0
527.0,0.0
528.0,1.0
528.0,0.0
529.0,1.0
529.0,0.0
530.0,1.0
530.0,0.0
531.0,1.0
531.0,0.0
532.0,1.0
532.0,0.0
533.0,1.0
533.0,0.0
534.0,1.0
534.0,0.0
535.0,1.0
535.0,0.0
536.0,1.0
536.0,0.0
537.0,1.0
537.0,0.0
538.0,1.0
538.0,0.0
539.0,1.0
539.0,0.0
540.0,1.0
540.0,0.0
541.0,1.0
541.0,0.0
542.0,1.0
542.0,0.0
543.0,1.0
543.0,0.0
544.0,1.0
544.0,0.0
545.0,1.0
545.0,0.0
546.0,1.0
546.0,0.0
547.0,1.0
547.0,0.0
548.0,1.0
548.0,0.0
549.0,1.0
549.0,0.0
550.0,1.0
550.0,0.0
551.0,1.0
551.0,0.0
552.0,1.0
552.0,0.0
553.0,1.0
553.0,0.0
554.0,1.0
554.0,0.0
555.0,1.0
555.0,0.0
556.0,1.0
556.0,0.0
557.0,1.0
557.0,0.0
558.0,1.0
558.0,0.0
559.0,1.0
559.0,0.0
560.0,1.0
560.0,0.0
561.0,1.0
561.0,0.0
562.0,1.0
562.0,0.0
563.0,1.0
563.0,0.0
564.0,1.0
564.0,0.0
565.0,1.0
565.0,0.0
566.0,1.0
566.0,0.0
567.0,1.0
567.0,0.0
568.0,1.0
568.0,0.0
569.0,1.0
569.0,0.0
570.0,1.0
570.0,0.0
571.0,1.0
571.0,0.0
572.0,1.0
572.0,0.0
573.0,1.0
573.0,0.0
574.0,1.0
574.0,0.0
575.0,1.0
575.0,0.0
576.0,1.0
576.0,0.0
577.0,1.0
577.0,0.0
578.0,1.0
578.0,0.0
579.0,1.0
579.0,0.0
580.0,1.0
580.0,0.0
581.0,1.0
581.0,0.0
582.0,1.0
582.0,0.0
583.0,1.0
583.0,0.0
584.0,1.0
584.0,0.0
585.0,1.0
585.0,0.0
586.0,1.0
586.0,0.0
587.0,1.0
587.0,0.0
588.0,1.0
588.0,0.0
589.0,1.0
589.0,0.0
590.0,1.0
590.0,0.0
591.0,1.0
591.0,0.0
592.0,1.0
592.0,0.0
593.0,1.0
593.0,0.0
594.0,1.0
594.0,0.0
595.0,1.0
595.0,0.0
596.0,1.0
596.0,0.0
597.0,1.0
597.0,0.0
598.0,1.0
598.0,0.0
599.0,1.0
599.0,0.0
600.0,1.0
600.0,0.0
601.0,1.0
601.0,0.0
602.0,1.0
602.0,0.0
603.0,1.0
603.0,0.0
604.0,1.0
604.0,0.0
605.0,1.0
605.0,0.0
606.0,1.0
606.0,0.0
607.0,1.0
607.0,0.0
608.0,1.0
608.0,0.0
609.0,1.0
609.0,0.0
610.0,1.0
610.0,0.0
611.0,1.0
611.0,0.0
612.0,1.0
612.0,0.0
613.0,1.0
613.0,0.0
614.0,1.0
614.0,0.0
615.0,1.0
615.0,0.0
616.0,1.0
616.0,0.0
617.0,1.0
617.0,0.0
618.0,1.0
618.0,0.0
619.0,1.0
619.0,0.0
620.0,1.0
620.0,0.0
621.0,1.0
621.0,0.0
622.0,1.0
622.0,0.0
623.0,1.0
623.0,0.0
624.0,1.0
624.0,0.0
625.0,1.0
625.0,0.0
626.0,1.0
626.0,0.0
627.0,1.0
627.0,0.0
628.0,1.0
628.0,0.0
629.0,1.0
629.0,0.0
630.0,1.0
630.0,0.0
631.0,1.0
631.0,0.0
632.0,1.0
632.0,0.0
633.0,1.0
633.0,0.0
634.0,1.0
634.0,0.0
635.0,1.0
635.0,0.0
636.0,1.0
636.0,0.0
637.0,1.0
637.0,0.0
638.0,1.0
638.0,0.0
639.0,1.0
639.0,0.0
640.0,1.0
640.0,0.0
641.0,1.0
641.0,0.0
642.0,1.0
642.0,0.0
643.0,1.0
643.0,0.0
644.0,1.0
644.0,0.0
645.0,1.0
645.0,0.0
646.0,1.0
646.0,0.0
647.0,1.0
647.0,0.0
648.0,1.0
648.0,0.0
649.0,1.0
649.0,0.0
650.0,1.0
650.0,0.0
651.0,1.0
651.0,0.0
652.0,1.0
652.0,0.0
653.0,1.0
653.0,0.0
654.0,1.0
654.0,0.0
655.0,1.0
655.0,0.0
656.0,1.0
656.0,0.0
657.0,1.0
657.0,0.0
658.0,1.0
658.0,0.0
659.0,1.0
659.0,0.0
660.0,1.0
660.0,0.0
661.0,1.0
661.0,0.0
662.0,1.0
662.0,0.0
663.0,1.0
663.0,0.0
664.0,1.0
664.0,0.0
665.0,1.0
665.0,0.0
666.0,1.0
666.0,0.0
667.0,1.0
667.0,0.0
668.0,1.0
668.0,0.0
669.0,1.0
669.0,0.0
670.0,1.0
670.0,0.0
671.0,1.0
671.0,0.0
672.0,1.0
672.0,0.0
673.0,1.0
673.0,0.0
674.0,1.0
674.0,0.0
675.0,1.0
675.0,0.0
676.0,1.0
676.0,0.0
677.0,1.0
677.0,0.0
678.0,1.0
678.0,0.0
679.0,1.0
679.0,0.0
680.0,1.0
680.0,0.0
681.0,1.0
681.0,0.0
682.0,1.0
682.0,0.0
683.0,1.0
683.0,0.0
684.0,1.0
684.0,0.0
685.0,1.0
685.0,0.0
686.0,1.0
686.0,0.0
687.0,1.0
687.0,0.0
688.0,1.0
688.0,0.0
689.0,1.0
689.0,0.0
690.0,1.0
690.0,0.0
691.0,1.0
691.0,0.0
692.0,1.0
692.0,0.0
693.0,1.0
693.0,0.0
694.0,1.0
694.0,0.0
695.0,1.0
695.0,0.0
696.0,1.0
696.0,0.0
697.0,1.0
697.0,0.0
698.0,1.0
698.0,0.0
699.0,1.0
699.0,0.0
700.0,1.0
700.0,0.0
701.0,1.0
701.0,0.0
702.0,1.0
702.0,0.0
703.0,1.0
703.0,0.0
704.0,1.0
704.0,0.0
705.0,1.0
705.0,0.0
706.0,1.0
706.0,0.0
707.0,1.0
707.0,0.0
708.0,1.0
708.0,0.0
709.0,1.0
709.0,0.0
710.0,1.0
710.0,0.0
711.0,1.0
711.0,0.0
712.0,1.0
712.0,0.0
713.0,1.0
713.0,0.0
714.0,1.0
714.0,0.0
715.0,1.0
715.0,0.0
716.0,1.0
716.0,0.0
717.0,1.0
717.0,0.0
718.0,1.0
718.0,0.0
719.0,1.0
719.0,0.0
720.0,1.0
720.0,0.0
721.0,1.0
721.0,0.0
722.0,1.0
722.0,0.0
723.0,1.0
723.0,0.0
724.0,1.0
724.0,0.0
725.0,1.0
725.0,0.0
726.0,1.0
726.0,0.0
727.0,1.0
727.0,0.0
728.0,1.0
728.0,0.0
729.0,1.0
729.0,0.0
730.0,1.0
730.0,0.0
731.0,1.0
731.0,0.0
732.0,1.0
732.0,0.0
733.0,1.0
733.0,0.0
734.0,1.0
734.0,0.0
735.0,1.0
735.0,0.0
736.0,1.0
736.0,0.0
737.0,1.0
737.0,0.0
738.0,1.0
738.0,0.0
739.0,1.0
739.0,0.0
740.0,1.0
740.0,0.0
741.0,1.0
741.0,0.0
742.0,1.0
742.0,0.0
743.0,1.0
743.0,0.0
744.0,1.0
744.0,0.0
745.0,1.0
745.0,0.0
746.0,1.0
746.0,0.0
747.0,1.0
747.0,0.0
748.0,1.0
748.0,0.0
749.0,1.0
749.0,0.0
750.0,1.0
750.0,0.0
751.0,1.0
751.0,0.0
752.0,1.0
752.0,0.0
753.0,1.0
753.0,0.0
754.0,1.0
754.0,0.0
755.0,1.0
755.0,0.0
756.0,1.0
756.0,0.0
757.0,1.0
757.0,0.0
758.0,1.0
758.0,0.0
759.0,1.0
759.0,0.0
760.0,1.0
760.0,0.0
761.0,1.0
761.0,0.0
762.0,1.0
762.0,0.0
763.0,1.0
763.0,0.0
764.0,1.0
764.0,0.0
765.0,1.0
765.0,0.0
766.0,1.0
766.0,0.0
767.0,1.0
767.0,0.0
768.0,1.0
768.0,0.0
769.0,1.0
769.0,0.0
770.0,1.0
770.0,0.0
771.0,1.0
771.0,0.0
772.0,1.0
772.0,0.0
773.0,1.0
773.0,0.0
774.0,1.0
774.0,0.0
775.0,1.0
775.0,0.0
776.0,1.0
776.0,0.0
777.0,1.0
777.0,0.0
778.0,1.0
778.0,0.0
779.0,1.0
779.0,0.0
780.0,1.0
780.0,0.0
781.0,1.0
781.0,0.0
782.0,1.0
782.0,0.0
783.0,1.0
783.0,0.0
784.0,1.0
784.0,0.0
785.0,1.0
785.0,0.0
786.0,1.0
786.0,0.0
787.0,1.0
787.0,0.0
788.0,1.0
788.0,0.0
789.0,1.0
789.0,0.0
790.0,1.0
790.0,0.0
791.0,1.0
791.0,0.0
792.0,1.0
792.0,0.0
793.0,1.0
793.0,0.0
794.0,1.0
794.0,0.0
795.0,1.0
795.0,0.0
796.0,1.0
796.0,0.0
797.0,1.0
797.0,0.0
798.0,1.0
798.0,0.0
799.0,1.0
799.0,0.0
800.0,1.0
800.0,0.0
801.0,1.0
801.0,0.0
802.0,1.0
802.0,0.0
803.0,1.0
803.0,0.0
804.0,1.0
804.0,0.0
805.0,1.0
805.0,0.0
806.0,1.0
806.0,0.0
807.0,1.0
807.0,0.0
808.0,1.0
808.0,0.0
809.0,1.0
809.0,0.0
810.0,1.0
810.0,0.0
811.0,1.0
811.0,0.0
812.0,1.0
812.0,0.0
813.0,1.0
813.0,0.0
814.0,1.0
814.0,0.0
815.0,1.0
815.0,0.0
816.0,1.0
816.0,0.0
817.0,1.0
817.0,0.0
818.0,1.0
818.0,0.0
819.0,1.0
819.0,0.0
820.0,1.0
820.0,0.0
821.0,1.0
821.0,0.0
822.0,1.0
822.0,0.0
823.0,1.0
823.0,0.0
824.0,1.0
824.0,0.0
825.0,1.0
825.0,0.0
826.0,1.0
826.0,0.0
827.0,1.0
827.0,0.0
828.0,1.0
828.0,0.0
829.0,1.0
829.0,0.0
830.0,1.0
830.0,0.0
831.0,1.0
831.0,0.0
832.0,1.0
832.0,0.0
833.0,1.0
833.0,0.0
834.0,1.0
834.0,0.0
835.0,1.0
835.0,0.0
836.0,1.0
836.0,0.0
837.0,1.0
837.0,0.0
838.0,1.0
838.0,0.0
839.0,1.0
839.0,0.0
840.0,1.0
840.0,0.0
841.0,1.0
841.0,0.0
842.0,1.0
842.0,0.0
843.0,1.0
843.0,0.0
844.0,1.0
844.0,0.0
845.0,1.0
845.0,0.0
846.0,1.0
846.0,0.0
847.0,1.0
847.0,0.0
848.0,1.0
848.0,0.0
849.0,1.0
849.0,0.0
850.0,1.0
850.0,0.0
851.0,1.0
851.0,0.0
852.0,1.0
852.0,0.0
853.0,1.0
853.0,0.0
854.0,1.0
854.0,0.0
855.0,1.0
855.0,0.0
856.0,1.0
856.0,0.0
857.0,1.0
857.0,0.0
858.0,1.0
858.0,0.0
859.0,1.0
859.0,0.0
860.0,1.0
860.0,0.0
861.0,1.0
861.0,0.0
862.0,1.0
862.0,0.0
863.0,1.0
863.0,0.0
864.0,1.0
864.0,0.0
865.0,1.0
865.0,0.0
866.0,1.0
866.0,0.0
867.0,1.0
867.0,0.0
868.0,1.0
868.0,0.0
869.0,1.0
869.0,0.0
870.0,1.0
870.0,0.0
871.0,1.0
871.0,0.0
872.0,1.0
872.0,0.0
873.0,1.0
873.0,0.0
874.0,1.0
874.0,0.0
875.0,1.0
875.0,0.0
876.0,1.0
876.0,0.0
877.0,1.0
877.0,0.0
878.0,1.0
878.0,0.0
879.0,1.0
879.0,0.0
880.0,1.0
880.0,0.0
881.0,1.0
881.0,0.0
882.0,1.0
882.0,0.0
883.0,1.0
883.0,0.0
884.0,1.0
884.0,0.0
885.0,1.0
885.0,0.0
886.0,1.0
886.0,0.0
887.0,1.0
887.0,0.0
888.0,1.0
888.0,0.0
889.0,1.0
889.0,0.0
890.0,1.0
890.0,0.0
891.0,1.0
891.0,0.0
892.0,1.0
892.0,0.0
893.0,1.0
893.0,0.0
894.0,1.0
894.0,0.0
895.0,1.0
895.0,0.0
896.0,1.0
896.0,0.0
897.0,1.0
897.0,0.0
898.0,1.0
898.0,0.0
899.0,1.0
899.0,0.0
900.0,1.0
900.0,0.0
901.0,1.0
901.0,0.0
902.0,1.0
902.0,0.0
903.0,1.0
903.0,0.0
904.0,1.0
904.0,0.0
905.0,1.0
905.0,0.0
906.0,1.0
906.0,0.0
907.0,1.0
907.0,0.0
908.0,1.0
908.0,0.0
909.0,1.0
909.0,0.0
910.0,1.0
910.0,0.0
911.0,1.0
911.0,0.0
912.0,1.0
912.0,0.0
913.0,1.0
913.0,0.0
914.0,1.0
914.0,0.0
915.0,1.0
915.0,0.0
916.0,1.0
916.0,0.0
917.0,1.0
917.0,0.0
918.0,1.0
918.0,0.0
919.0,1.0
919.0,0.0
920.0,1.0
920.0,0.0
921.0,1.0
921.0,0.0
922.0,1.0
922.0,0.0
923.0,1.0
923.0,0.0
924.0,1.0
924.0,0.0
925.0,1.0
925.0,0.0
926.0,1.0
926.0,0.0
927.0,1.0
927.0,0.0
928.0,1.0
928.0,0.0
929.0,1.0
929.0,0.0
930.0,1.0
930.0,0.0
931.0,1.0
931.0,0.0
932.0,1.0
932.0,0.0
933.0,1.0
933.0,0.0
934.0,1.0
934.0,0.0
935.0,1.0
935.0,0.0
936.0,1.0
936.0,0.0
937.0,1.0
937.0,0.0
938.0,1.0
938.0,0.0
939.0,1.0
939.0,0.0
940.0,1.0
940.0,0.0
941.0,1.0
941.0,0.0
942.0,1.0
942.0,0.0
943.0,1.0
943.0,0.0
944.0,1.0
944.0,0.0
945.0,1.0
945.0,0.0
946.0,1.0
946.0,0.0
947.0,1.0
947.0,0.0
948.0,1.0
948.0,0.0
949.0,1.0
949.0,0.0
950.0,1.0
950.0,0.0
951.0,1.0
951.0,0.0
952.0,1.0
952.0,0.0
953.0,1.0
953.0,0.0
954.0,1.0
954.0,0.0
955.0,1.0
955.0,0.0
956.0,1.0
956.0,0.0
957.0,1.0
957.0,0.0
958.0,1.0
958.0,0.0
959.0,1.0
959.0,0.0
960.0,1.0
960.0,0.0
961.0,1.0
961.0,0.0
962.0,1.0
962.0,0.0
963.0,1.0
963.0,0.0
964.0,1.0
964.0,0.0
965.0,1.0
965.0,0.0
966.0,1.0
966.0,0.0
967.0,1.0
967.0,0.0
968.0,1.0
968.0,0.0
969.0,1.0
969.0,0.0
970.0,1.0
970.0,0.0
971.0,1.0
971.0,0.0
972.0,1.0
972.0,0.0
973.0,1.0
973.0,0.0
974.0,1.0
974.0,0.0
975.0,1.0
975.0,0.0
976.0,1.0
976.0,0.0
977.0,1.0
977.0,0.0
978.0,1.0
978.0,0.0
979.0,1.0
979.0,0.0
980.0,1.0
980.0,0.0
981.0,1.0
981.0,0.0
982.0,1.0
982.0,0.0
983.0,1.0
983.0,0.0
984.0,1.0
984.0,0.0
985.0,1.0
985.0,0.0
986.0,1.0
986.0,0.0
987.0,1.0
987.0,0.0
988.0,1.0
988.0,0.0
989.0,1.0
989.0,0.0
990.0,1.0
990.0,0.0
991.0,1.0
991.0,0.0
992.0,1.0
992.0,0.0
993.0,1.0
993.0,0.0
994.0,1.0
994.0,0.0
995.0,1.0
995.0,0.0
996.0,1.0
996.0,0.0
997.0,1.0
997.0,0.0
998.0,1.0
998.0,0.0
999.0,1.0
999.0,0.0
1000.0,1.0
1000.0,0.0
1000.000002,2.0E-6
					</series>
					<comment/>
				</plot>
			</result>
		</query>
		<query>
			<formula>A[] Station1.nPieces() &lt;= 1 and Station2.nPieces() &lt;= 1 and Station3.nPieces() &lt;= 1 and Station5.nPieces() &lt;= 1 and Station5.nPieces() &lt;= 1 and Station6.nPieces() &lt;= 1</formula>
			<comment>No processing station ever holds more than 1 piece</comment>
			<result outcome="success" type="quality" timestamp="2023-07-15 14:58:55 +0200">
			</result>
		</query>
		<query>
			<formula>A[] !Synch.Start imply nPieces() == NPC</formula>
			<comment>After the initialization, the belt will always hold exactly the starting amount of pieces</comment>
			<result outcome="success" type="quality" timestamp="2023-07-15 15:19:36 +0200">
			</result>
		</query>
		<query>
			<formula>A[] isQueueFull(QueueSensor2.b_id, QueueSensor2.pos) imply !belt[QueueSensor2.b_id][QueueSensor2.pos - 1]</formula>
			<comment/>
			<result outcome="success" type="quality" timestamp="2023-07-15 15:59:47 +0200">
			</result>
		</query>
		<query>
			<formula/>
			<comment/>
		</query>
	</queries>
</nta>
