<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE nta PUBLIC '-//Uppaal Team//DTD Flat System 1.1//EN' 'http://www.it.uu.se/research/group/darts/uppaal/flat-1_2.dtd'>
<nta>
	<declaration>/// ********** CONSTANTS

// number of conveyor belt segments
const int NS = 7;
// max length of a conveyor belt segment
const int L = 25;
// number of processing stations
const int NP = 6;


/// ********** CUSTOM TYPES

// id type
typedef int[0, NS + NP - 1] id;


/// ********** SYSTEM SETTINGS

// conveyor belt speed [slots/s]
const int speed = 2;
// processing stations processing time
const int processing_time[NP] = {7,8,6,5,7,8};
// processing stations location on belts
const int P_pos[NP] = {4, 4, 3, 4, 4, 3};

// number of pieces
const int NPC = 13;    // previously 6

/// ********** EXTRA SETTINGS

// id of following component
//id next[NS + NP] = {7, 8, 4, 10, 11, 6, 12, 1, 2, 3, 6, 5, 0};
id next[NS + NP] = {7, 8, 9, 10, 11, 6, 12, 1, 2, 3, 6, 5, 0};

// length of each conveyor belt segment
const int length[NS + NP] = {13, 16, 25, 4, 13, 2, 5, 5, 5, 4, 9, 6, 4};



/// ********** CHANNELS

// channel to synchronize belts movement
broadcast chan synch1, synch2, synch3, synch4;
// 
broadcast chan pieceAvailable[NP], control;
// channel priority
chan priority default &lt; pieceAvailable &lt; control;


/// ********** OTHER DATA STRUCTURES

// stations busy processing
bool busy[NP];
// stations ready to accept a new piece
bool ready[NP];
// stations that can release a piece
bool canRelease[NP];
// conveyor belt segments matrix
bool belt[NS + NP][L];
// id of belt segment preceding a processing station
id prev_id[NP];
// belt semaphore
bool blocked[NS];


/// ********** FUNCTIONS

// remove last piece from belt segment
void removeLast(id b_id) {
    belt[b_id][length[b_id] - 1] = false;
}
// set the busy state of a processing station
void setBusy(id s_id, bool s) {
    busy[s_id - NS] = s;
}
// set the done state of a processing station
void setDone(id s_id, bool s) {
    //done[s_id - NS] = s;
}


/// ********** PISTONE VERDE
// 1: ALTERNATI
// 2: IN 8 (3) SE LIBERA
// 3: UN'ALTRA POLICY

const int policy = 1;
// if true, send to station 9
bool semaphore = true;
// if wait = true, then the belt precedeed by another belt has to wait (to avoid belts skipping a step)
bool wait = true;
// if stop_process is false, then the system can process a piece (always false except for station 9 (3), where verifier[9] = !semaphore
bool stop_process[NS + NP];</declaration>
	<template>
		<name>Synchronizer</name>
		<declaration>clock c;

void initialize() {
    int i, j; 
    
    for (i = 0; i &lt; NPC; i++) {
        belt[0][i] = true;
    }

    for (i = 0; i &lt; NP; i++) {
        canRelease[i] = true;
    }


    /*for (i = CBS_N; i &lt; CBS_N + PS_N; i++) {
        for (j = 0; j &lt; CBS_N; j++) {
            if (next_id[j] == i) {
                prev_id[i - CBS_N] = j;
            }
        }
    }*/
}</declaration>
		<location id="id0" x="42" y="8">
			<committed/>
		</location>
		<location id="id1" x="42" y="-153">
			<committed/>
		</location>
		<location id="id2" x="-119" y="-153">
			<committed/>
		</location>
		<location id="id3" x="-119" y="8">
			<label kind="invariant" x="-144" y="25">c &lt;= 1</label>
		</location>
		<location id="id4" x="-297" y="8">
			<name x="-322" y="25">Start</name>
			<committed/>
		</location>
		<init ref="id4"/>
		<transition>
			<source ref="id0"/>
			<target ref="id3"/>
			<label kind="synchronisation" x="-68" y="-17">synch4!</label>
		</transition>
		<transition>
			<source ref="id1"/>
			<target ref="id0"/>
			<label kind="synchronisation" x="51" y="-85">synch3!</label>
		</transition>
		<transition>
			<source ref="id2"/>
			<target ref="id1"/>
			<label kind="synchronisation" x="-68" y="-178">synch2!</label>
		</transition>
		<transition>
			<source ref="id3"/>
			<target ref="id2"/>
			<label kind="guard" x="-178" y="-102">c == 1</label>
			<label kind="synchronisation" x="-187" y="-85">synch1!</label>
			<label kind="assignment" x="-170" y="-68">c = 0</label>
		</transition>
		<transition>
			<source ref="id4"/>
			<target ref="id3"/>
			<label kind="assignment" x="-263" y="-17">initialize()</label>
		</transition>
	</template>
	<template>
		<name x="5" y="5">ConveyorBelt</name>
		<declaration>void move() {
    int i, j;
    int index = 0;
    id prev_id;

    for (i = 0; i &lt; NS; i++) {
        // move piece on station's belt
        if (next[i] &gt;= NS &amp;&amp; ready[next[i] - NS] &amp;&amp; belt[i][length[i] - 1]) {
            belt[i][length[i] - 1] = false;
            belt[next[i]][0] = true;
            busy[next[i] - NS] = true;
        }
    }

    // for each belt segment
    for (i = 0; i &lt; NS; i++) {  
        // move pieces forward by 1 slot
        for (j = length[i] - 1; j &gt; 0; j--) {
            if (!belt[i][j]) {
                belt[i][j] = belt[i][j - 1];
                belt[i][j - 1] = false;
            }
        }

        // find the id of the previous component
        for (j = NS + NP - 1; j &gt;= 0; j--) {
            if (next[j] == i) {
                prev_id = j;
                index++;
            }
        }
        // choose the previous component depending on its availability
        if (index &gt; 1) {
            for (j = NS + NP - 1; j &gt;= 0; j--) {
                // this line select the component with a piece in it
                if (next[j] == i &amp;&amp; belt[j][length[j] - 1]) {
                    prev_id = j;
                }

                // need to add a selection in case of pieces in both previous components



            } 
        }

        // if legal, take one piece from the previous component and
        // add it at the start of the belt
        if (prev_id &gt;= NS &amp;&amp; !belt[i][0] &amp;&amp; belt[prev_id][length[prev_id] - 1]) {
            belt[i][0] = true;
            removeLast(prev_id);
        } else if (prev_id &lt; NS &amp;&amp; !belt[i][0] &amp;&amp; belt[prev_id][length[prev_id] - 1]) {
            if (i &lt; NS &amp;&amp; wait &amp;&amp; i &gt; prev_id) {
                wait = !wait;
            } else {
                if (i &lt; NS &amp;&amp; !wait &amp;&amp; i &gt; prev_id) {
                    wait = !wait;
                }
                belt[i][0] = true;
                removeLast(prev_id);
            }
        }
    }
}</declaration>
		<location id="id5" x="-1266" y="-1232">
			<name x="-1292" y="-1215">Moving</name>
		</location>
		<init ref="id5"/>
		<transition>
			<source ref="id5"/>
			<target ref="id5"/>
			<label kind="synchronisation" x="-1292" y="-1376">synch2?</label>
			<label kind="assignment" x="-1292" y="-1359">move()</label>
			<nail x="-1300" y="-1334"/>
			<nail x="-1232" y="-1334"/>
		</transition>
	</template>
	<template>
		<name>ProcessingStation</name>
		<parameter>id s_id, int pt, int pos</parameter>
		<declaration>int counter;

void move() {
    int i;

    // move pieces forward by 1 slot
    for (i = length[s_id] - 1; i &gt; 0; i--) {
        if (!belt[s_id][i]) {
            belt[s_id][i] = belt[s_id][i - 1];
            belt[s_id][i - 1] = false;
        }
    }
}</declaration>
		<location id="id6" x="-2304" y="-2830">
		</location>
		<location id="id7" x="-2304" y="-2533">
		</location>
		<location id="id8" x="-1921" y="-2533">
		</location>
		<location id="id9" x="-1921" y="-2958">
			<name x="-1947" y="-3001">Ready</name>
			<committed/>
		</location>
		<location id="id10" x="-2304" y="-2958">
			<name x="-2329" y="-3000">Empty</name>
		</location>
		<location id="id11" x="-2304" y="-2695">
		</location>
		<init ref="id10"/>
		<transition>
			<source ref="id6"/>
			<target ref="id10"/>
			<label kind="guard" x="-2490" y="-2932">!belt[s_id][length[s_id] - 1]</label>
			<label kind="synchronisation" x="-2372" y="-2915">synch3?</label>
			<label kind="assignment" x="-2465" y="-2898">busy[s_id - NS] = false</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id6"/>
			<label kind="guard" x="-2481" y="-2779">belt[s_id][length[s_id] - 1]</label>
			<label kind="synchronisation" x="-2371" y="-2762">synch2?</label>
		</transition>
		<transition>
			<source ref="id11"/>
			<target ref="id11"/>
			<label kind="guard" x="-2558" y="-2728">!belt[s_id][length[s_id] - 1]</label>
			<label kind="synchronisation" x="-2449" y="-2711">synch2?</label>
			<label kind="assignment" x="-2440" y="-2694">move()</label>
			<nail x="-2380" y="-2720"/>
			<nail x="-2380" y="-2669"/>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id11"/>
			<label kind="guard" x="-2575" y="-2635">counter == pt &amp;&amp; canRelease[s_id - NS]</label>
			<label kind="synchronisation" x="-2372" y="-2618">synch1?</label>
		</transition>
		<transition>
			<source ref="id7"/>
			<target ref="id7"/>
			<label kind="guard" x="-2473" y="-2558">counter &lt; pt</label>
			<label kind="synchronisation" x="-2448" y="-2542">synch1?</label>
			<label kind="assignment" x="-2465" y="-2525">counter++</label>
			<nail x="-2380" y="-2559"/>
			<nail x="-2380" y="-2508"/>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id7"/>
			<label kind="guard" x="-2202" y="-2525">belt[s_id][pos - 1]</label>
			<label kind="synchronisation" x="-2151" y="-2508">synch1?</label>
			<label kind="assignment" x="-2168" y="-2491">counter = 1</label>
		</transition>
		<transition>
			<source ref="id8"/>
			<target ref="id8"/>
			<label kind="synchronisation" x="-1845" y="-2550">synch2?</label>
			<label kind="assignment" x="-1845" y="-2533">move()</label>
			<nail x="-1854" y="-2508"/>
			<nail x="-1854" y="-2550"/>
		</transition>
		<transition>
			<source ref="id9"/>
			<target ref="id8"/>
			<label kind="guard" x="-1913" y="-2720">busy[s_id - NS]</label>
			<label kind="synchronisation" x="-1913" y="-2703">synch3?</label>
			<label kind="assignment" x="-1913" y="-2686">ready[s_id - NS] = false</label>
		</transition>
		<transition>
			<source ref="id10"/>
			<target ref="id9"/>
			<label kind="guard" x="-2201" y="-3016">!stop_process[s_id-1]</label>
			<label kind="synchronisation" x="-2210" y="-3000">pieceAvailable[s_id - NS]?</label>
			<label kind="assignment" x="-2202" y="-2983">ready[s_id - NS] = true</label>
		</transition>
	</template>
	<template>
		<name>StationSensor</name>
		<parameter>id s_id, id b_id</parameter>
		<location id="id12" x="-3289" y="-3417">
			<committed/>
		</location>
		<location id="id13" x="-3578" y="-3417">
		</location>
		<init ref="id13"/>
		<transition>
			<source ref="id12"/>
			<target ref="id13"/>
			<label kind="synchronisation" x="-3510" y="-3366">pieceAvailable[s_id - NS]!</label>
			<nail x="-3340" y="-3366"/>
			<nail x="-3535" y="-3367"/>
		</transition>
		<transition>
			<source ref="id13"/>
			<target ref="id12"/>
			<label kind="guard" x="-3527" y="-3510">belt[b_id][length[b_id] - 1]</label>
			<label kind="synchronisation" x="-3468" y="-3493">synch1?</label>
			<nail x="-3535" y="-3468"/>
			<nail x="-3340" y="-3468"/>
		</transition>
	</template>
	<template>
		<name>QueueSensor</name>
		<parameter>id s_id, id b_id, int pos</parameter>
		<location id="id14" x="-790" y="-8">
		</location>
		<init ref="id14"/>
		<transition>
			<source ref="id14"/>
			<target ref="id14"/>
			<label kind="guard" x="-841" y="85">!belt[b_id][pos]</label>
			<label kind="synchronisation" x="-816" y="102">synch1?</label>
			<label kind="assignment" x="-892" y="119">canRelease[s_id - NS] = true</label>
			<nail x="-824" y="76"/>
			<nail x="-756" y="76"/>
		</transition>
		<transition>
			<source ref="id14"/>
			<target ref="id14"/>
			<label kind="guard" x="-841" y="-153">belt[b_id][pos]</label>
			<label kind="synchronisation" x="-815" y="-136">synch1?</label>
			<label kind="assignment" x="-909" y="-119">canRelease[s_id - NS] = false</label>
			<nail x="-824" y="-93"/>
			<nail x="-756" y="-93"/>
		</transition>
	</template>
	<template>
		<name>control_station</name>
		<parameter>int policy, id s_id, id b_id</parameter>
		<declaration>void control() {
    if (policy == 1) {
        if (semaphore) {
            next[2] = 4;
        } else {
            next[2] = 9;
        }
    }
    semaphore = !semaphore;
    stop_process[s_id-1] = !semaphore;
    /*if (policy == 2) {
        if (verifier[s_id-1]) {
            verifier[s_id-1] = !verifier[s_id-1];
            next[2] = 4;
        } else {
            verifier[s_id-1] = !verifier[s_id-1];
            next[2] = 9;
        }
    }*/

}</declaration>
		<location id="id15" x="-297" y="-42">
		</location>
		<location id="id16" x="-51" y="-42">
		</location>
		<init ref="id15"/>
		<transition>
			<source ref="id16"/>
			<target ref="id15"/>
			<label kind="assignment" x="-187" y="25">control()</label>
			<nail x="-161" y="25"/>
		</transition>
		<transition>
			<source ref="id15"/>
			<target ref="id16"/>
			<label kind="guard" x="-246" y="-161">belt[b_id][length[b_id]-1]</label>
			<label kind="synchronisation" x="-195" y="-144">synch1?</label>
			<nail x="-170" y="-119"/>
		</transition>
	</template>
	<system>// Place template instantiations here.
Synch = Synchronizer();
Belt = ConveyorBelt();
Station1 = ProcessingStation(7, 5, 4);
Station2 = ProcessingStation(8, 5, 4); // works also with 100 and all the other processing times set to 1, to check if the queue sensor works properly
Station3 = ProcessingStation(9, 5, 3); // works also with 30 (this cause the controller to change policy because the station is occupied for long time)
Station4 = ProcessingStation(10, 5, 4);
Station5 = ProcessingStation(11, 5, 4);
Station6 = ProcessingStation(12, 5, 3);

StationSensor1 = StationSensor(7, 0);
StationSensor2 = StationSensor(8, 1);
StationSensor3 = StationSensor(9, 2);
StationSensor4 = StationSensor(10, 3);
StationSensor5 = StationSensor(11, 4);
StationSensor6 = StationSensor(12, 6);

QueueSensor1 = QueueSensor(12, 0, 2);
QueueSensor2 = QueueSensor(7, 1, 10);        // previously 5 instead of 10
QueueSensor3 = QueueSensor(8, 4, 4);
QueueSensor4 = QueueSensor(9, 3, 1);
QueueSensor5 = QueueSensor(10, 6, 3);
QueueSensor6 = QueueSensor(11, 6, 3);

//test = FlowController(1);
controller = control_station(1, 9, 2);
// List one or more processes to be composed into a system.
system Synch, Belt,
        Station1, Station2, Station3, Station4, Station5, Station6,
        StationSensor1, StationSensor2, StationSensor3, StationSensor4, StationSensor5, StationSensor6,
        controller,
        QueueSensor1, QueueSensor2, QueueSensor3, QueueSensor4, QueueSensor5, QueueSensor6;</system>
	<queries>
		<query>
			<formula></formula>
			<comment></comment>
		</query>
	</queries>
</nta>
